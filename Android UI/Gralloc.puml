@startuml

title <b><size:30>Gralloc模块分析</size></b>

fork

start

:<b><size:25>Gralloc模块分析;

:1.加载Gralloc模块，并且获得一个
gralloc设备和一个fb设备;

:2.通过gralloc设备，用户空间的应用程序可以申请
分配一块图形缓冲区，并且将这块图形缓冲区映射到应
用程序的地址空间来，以便可以向里面写入要绘制的画
面内容;

:3.用户空间中的应用程序通过fb设备来将前面准备好
的图形缓冲区渲染到帧缓冲区中;

:4.当用户空间中的应用程序不再需要使用一块图形缓
冲区的时候，通过gralloc设备来释放它，并且将它
从地址空间中解除映射;


end

fork again

start 

:<b><size:20><1>Gralloc模块的加载过程;

:1.通过hw_get_module以HAL模块的ID作为
参数，加载指定的模块，其中Gralloc的ID值
为“gralloc”;

:2.加载gralloc.<ro.hardware>.so、gralloc.<ro.product.board>.so
、gralloc.<ro.broad.platform>.so、gralloc.<ro.arch>.so其中的一
个模块，否则加载gralloc.default.so，并调用load函数加载到内存中来;

:3.load函数中，dlopen将.so文件加载到内存，调用dlsym获取导出的HMI符
号，然后强制转换为hw_module_t结构体指针，最后返回到pHmi;

:4.而在Gralloc实现中，hw_module_methods_t->hw_module_t->gr
alloc_module_t->private_module_t，所以在这里hw_module_t
其实是指向的private_module_t的，而private_module_t中有成员
变量methods，methods指向的是gralloc_device_open，用来打开
gralloc或者fb设备;

:5.gralloc_module_t定义了四个函数registerBuffer、
unregisterBuffer、lock、unlock，分别是注册和注销
一个指定的图形缓冲区，锁定和解锁图形缓冲区;

:6.假如是在C++环境编译的话，那就是继承了native_handle_t
，一个文件描述符，指向帧缓冲区设备或者匿名共享内存，整数
magic表示private_handle_t结构体，整数flags描述图形缓
冲区，表示是否已经分配，帧数size描述图形缓冲区的大小，整
数offset描述图形缓冲区的偏移地址，整数pid描述图形缓冲区
创建者PID，sNumInts和sNumFds分别是1和6，表示
private_handle_t包含1个文件描述符和6个整数;

end

fork again

start 

:<b><size:20><2>gralloc设备打开过程;

:1.根据Gralloc模块中，通过gralloc_device_open函数，
根据参数”gpu0“，打开gralloc设备，并用alloc_device_t
结构体来描述;

:2.gralloc_device_open函数，创建gralloc_context_t结构体，
并初始化变量device，device类型是gralloc_device_t，用来描
述gralloc设备，gralloc设备的成员函数alloc和free分别是
Gralloc模块中函数gralloc_alloc和gralloc_free;

end


fork again

start 

:<b><size:20><3>fb设备打开过程;

:1.根据Gralloc模块中，通过gralloc_device_open函数，
根据参数”fb0“，打开fb设备，并用framebuffer_device_t
结构体来描述;

:2.gralloc_device_open函数，调用的是fb_device_open
来打开fb设备，fb_device_open函数创建了fb_context_t结
构体，并对device变量初始化，这个变量是framebuffer_device_t;

:3.fb_device_open打开fb设备，会调用mapFrameBuffer
来获取系统帧缓冲区信息，并保持在参数module描述的
private_module_t结构体成员变量中;

:4.mapFrameBuffer还会将系统帧缓冲区映射到当前的地址
空间来，Gralloc模块的fb设备是由SurfaceFlinger服务
来负责打开和管理的，而SurfaceFlinger服务是运行在
System进程中，所以系统帧缓冲区实际上是映射到System
进程的地址空间中的;

end

fork again 

start

:<b><size:20><4>分配图形缓冲区的过程gralloc_alloc;

:1.分配图形缓冲区是gralloc_alloc来实现的，先确定参数
format，图形缓冲区的宽和高，得出整个图形所需要使用的字
节数，计算一行的有多少像素点;

:2.接着gralloc_alloc调用gralloc_alloc_framebuffer
用来在系统帧缓冲区中分配图形缓冲区，而调用gralloc_alloc_buffer
用来在内存分配图形缓冲区;

:3.gralloc_alloc_framebuffer中，首先对系统帧缓冲区初始化
，即对这里的变量m所指的一个private_module_t结构体的成员变
量framebuffer的值不等为NULL，如果是NULL，调用另外一个函数
mapFrameBufferLocked初始化;

:4.gralloc_alloc_framebuffer中，接着bufferMask用来描述
帧缓冲区的使用情况，0x11表示两个帧缓冲区被分配出去了;

:5.gralloc_alloc_framebuffer中，接着分配出去的图形缓冲
区的开始地址就保存在前面所创建的private_handle_t结构体的
hnd成员变量base中，这样用户空间的应用程序就可以直接将要渲
染的内容拷贝到这个地址上去;

:6.gralloc_alloc_framebuffer中,最后设置成员变量offset
，得到图形缓冲区的起始地址相对于系统帧缓冲区的基地址的偏移量;

:7.gralloc_alloc_buffer中，首先调用函数ashmem_create_region
来创建一块匿名共享内存，接着再在这块匿名共享内存上分配图形缓冲区;

:8.gralloc_alloc_buffer中，从匿名内存中分配的图形缓冲区映射到
进程的地址空间来，通过mapBuffer实现;

:9.最后，在系统帧缓冲区分配的图形缓冲区是在SurfaceFlinger服务
中使用的，而内存中分配的图形缓冲区既可以在SurfaceFlinger服务中
使用，也可以在其他应用程序中使用;

end

fork again

start 

:<b><size:20><5>图形缓冲区的释放过程gralloc_free;

:1.gralloc_free中，要释放的图形缓冲区使用参数handle来描述的
，要释放的图形缓冲区可能在系统帧缓冲区也有可能是内存中分配的，
通过flags，PRIV_FLAGS_FRAMEBUFFER为来判断;

:2.gralloc_free中，如果要释放的是系统帧缓冲区中分配的，
先知道图形缓冲区在系统帧缓冲区的index位置，接着再将变量
m所描述的private_module_t结构体的成员变量bufferMask
的第index位重置为0即可;

:3.gralloc_free中，如果要释放的是图形缓冲区是内存中分
配的，那么调用terminateBuffer解除要释放的图形缓冲区在
当前进程的地址空间中的映射，terminateBuffer中调用的是
gralloc_umap来解除的映射的;

:4.gralloc_free中，最后，会将要用来描述要释放的图形缓
冲区的private_handle_t结构体所占用的内存释放掉，并释
放系统帧缓冲区和匿名共享内存的文件描述符关闭掉;

end

fork again

start

:<b><size:20><6>图形缓冲区的注册过程;

:1.SurfaceFlinger服务分配了所有的图形缓冲区，
分配的过程同时也包含了注册的过程;

:2.注册的操作是在Gralloc模块中的函数
gralloc_register_buffer来实现的，
这个函数在mapper.cpp中;

:3.gralloc_register_buffer中，首先
验证参数handle指向的一块图形缓冲区的确
是Gralloc模块分配的，通过private_handle_t
的静态成员函数validate来验证的;

:4.gralloc_register_buffer中，接着
检查当前进程是否就是请求Gralloc模块分
配的图形缓冲区hnd进程，如果是的话，就
不重复注册了;

:5.gralloc_register_buffer中，实际
上是由函数gralloc_map来实现，如果发现
是系统帧缓冲区，不在映射图形缓冲区的操作;

:6.gralloc_map中，如果要注册的图形缓冲
区是内存中分配的，即它的标志flags的
PRIV_FLAGS_FRAMEBUFFER为是等于0，就
需要映射到当前进程的地址空间来了，由于要
注册的图形缓冲区是在文件描述符hnd->fd
所描述的一块匿名共享内存中分配的，因此，
我们只需要将文件描述符hnd->fd所描述的
一块匿名共享内存映射到当前的进程地址空
间来，就可以将参数hnd所描述的一个图形
缓冲区映射到当前进程的地址空间来;

:7.gralloc_map中，由于映射文件描述符hnd->fd得到
的是一整块匿名共享内存在当前进程地址空间的基地址，
而要注册的图形缓冲区可能只占一部分，因此，我们还需
要将要注册的图形缓冲区在被映射的匿名共享内存中的偏
移量hnd->offset加上被映射的匿名共享内存的基地址
hnd->base，猜得到要注册的图形缓冲区在当前进程中
的访问地址，最终又被写入到hnd->base中去;

end


fork again

start 

:<b><size:20><7>图形缓冲区的注销过程gralloc_unregister_buffer;

:1.gralloc_unregister_buffer中，和注册一样，
判断根据private_module_t中的validate验证参数
handle是不是有Gralloc模块分配的，接着再强转为
private_handle_t来访问;

:2.gralloc_unregister_buffer中，如果是自己
分配的，就不做任何操作，不是当前进程的话，就调
用另外一个函数gralloc_unmap来注销图形缓冲区hnd;

:3.gralloc_umap中，这个函数和前面的gralloc_map
的实现是类似的，只不过是执行相反的操作，则解除一个
指定的图形缓冲区在当前进程的地址空间中的映射;

end


fork again 

start 

:<b><size:20><8>图形缓冲区的渲染的过程fb_post;

:1.用户空间应用程序将画面的内容写入到图形缓冲区中
去之后，还需要将图形缓冲区渲染到系统帧缓冲区中，这
样才可以把画面绘制到设备显示屏中去，渲染图形缓冲区
是由Gralloc模块中的函数fb_post来实现的;

:2.fb_post中，参数buffer用来描述要渲染的图形缓
冲区，它向的是private_handle_t结构体，通过
validate来验证，验证通过之后，强制转换为
private_handle_t结构体;

:3.fb_post中，参数dev用来描述Gralloc模块中
的一个fb设备，打开fb设备的时候，Gralloc模块
返回给调用者实际上是一个fb_context_t结构体，
这里的dev所描述的一个frame_device_t结构体
转换成一个fb_context_t结构体ctx;

:4.fb_post中，参数dev的成员变量common指向
了一个hw_device_t结构体，这个结构体的成员
变量module指向了一个Gralloc模块
private_module_t，然后可以将dev->common
.module转换成private_module_t结构体m;

:5.fb_post中，private_module_t结构体m，
可能是系统帧缓冲区分配的，也可能是内存中分
配的，因此，分两种情况来讨论;

:6.fb_post中，hnd中的PRIV_FLAGS_FRAMEBUFFER是1的话，
是系统帧缓冲区中分配的，不需要将图形缓冲区的内容拷贝到系
统帧缓冲区去，当时需要告诉系统帧缓冲区设备将要渲染的图形
缓冲区作为系统当前的输出图形缓冲区，要告诉系统帧缓冲区的
使用的是哪一个图形缓冲区;

:7.fb_post中，系统帧缓冲区中，设置系统帧缓冲区的当前图
形缓冲区是通过FBIOPUT_VSCREENINFO来进行的，成功完IO
控制命令之后，还会将当前被渲染的图形缓冲区保存在
private_module_t结构体m成员变量currentBuffer中，
以便于可以记录当前被渲染的图形缓冲区是哪一个;

:8.fb_post中，在内存中分配的，就需要将它的内容拷贝到
系统帧缓冲区中了，这个拷贝的工作，是通过函数memcpy来
完成的;

:9.fb_post中，在内存中分配的，memcpy函数中要确认，
第一个是要渲染的图形缓冲区的起始地址，保存在参数
buffer中的private_handle_t结构体中，第二个参数
是要系统帧缓冲区的基地址，保存在private_module_t
结构体m的成员变量framebuffer所指向的一个
private_handle_t结构体中，第三个参数是要拷贝的
内容的大小，这个大小刚好是一个屏幕像素所占据的内存
的带下，由屏幕高度乘以一行屏幕像素所占用的内存大小;

:10.fb_post中，要将一块内存缓冲区的内容拷贝到
系统帧缓冲区中去之前，要将它们锁定，锁定和解锁
都是在Gralloc模块中的gralloc_lock和
gralloc_unlock;

:11.fb_post中，gralloc_lock和gralloc_unlock
实际上并没有锁定和解锁图形缓冲区;

end

fork again

start

:<b><size:20><9>Android帧缓冲区硬件抽象层模块Gralloc实现原理;

:1.分配一个匹配的屏幕大小的图形缓冲区;

:2.将分配好的图形缓冲区注册(映射)到当前进程的地址空间来;

:3.将要绘制的画面的内容写入到已经注册好的图形缓冲区中去，
并且渲染(拷贝)到系统帧缓冲区中去;

:<b><size:20><10>为了实现三个操作;

:1.加载Gralloc模块;

:2.打开Gralloc模块中的gralloc设备和fb设备;

:其中，gralloc设备负责分配图形缓冲区，Gralloc模块负责
注册图形缓冲区，而fb设备负责渲染图形缓冲区;


end

@enduml