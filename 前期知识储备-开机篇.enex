<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export2.dtd">
<en-export export-date="20171011T143620Z" application="Evernote/Windows" version="6.x">
<note><title>前期知识储备-开机篇</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">

<en-note><div>Android系统中，最多出现3个画面，每一个画面都描述了不同的过程。</div><div><br/></div><div>第一个开机画面是内核启动的过程中出现的，它是一个静态的画面;</div><div>第二个开机画面是在init进程启动的过程中出现的，它也是一个静态的画面;</div><div>第三个开机画面是系统服务启动的过程中出现的，它是一个动态的画面。</div><div>无论是哪个画面，他们都是在一个称为帧缓冲区(frame buffer,简称fb)的硬件设备上进行渲染的。</div><div><br/></div><div>1.第一个开机画面的显示过程</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;Android系统的第一个开机画面其实是Linux内核的启动画面.在默认情况下，这个画面是不会出现的，除非我们在编译内核的时候，启动一下两个编译选项:</div><div>&nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; &nbsp;CONFIG_FRAMEBUFFER_CONSOLE</div><div>&nbsp; &nbsp; &nbsp;CONFIG_LOGO</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;第一个编译选项表示内核支持帧缓存区控制台，它对应的配置菜单项为:Device Drivers--&gt;Graphices support--&gt;Console display driver support--&gt;Framebuffer Console support。</div><div>&nbsp; &nbsp; &nbsp;第二个编译选项表示内核在启动的过程中，需要显示LOGO，它对应的配置菜单项为：Device Drivers--&gt;Graphics support--&gt;Bootup logo。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;帧缓冲区硬件设备在内核中有一个对应的驱动程序模块fbmem，它实现在文件kernel/goldfish/drivers/video/fbmem.c中，它的初始化函数所下所示:</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int __init</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">fbmem_init(void)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;pro_create(&quot;fb&quot;,0, NULL, &amp;fb_proc_fops);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(register_chrdev(FB_MAJOR, &quot;fb&quot;, &amp;fb_fops))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printk(&quot;unable to get major %d for fb devs\n&quot;, FB_MAJOR);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fb_class = class_create(THIS_MODULE, &quot;graphics&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(IS_ERR(fb_class)){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printk(KERN_WARNING, &quot;Unable to create fb class ; error = %ld\n&quot;, PTR_ERR(fb_class));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fb_class = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;这个函数首先调用函数proc_create在/proc目录下创建了一个fb文件，接着又调用函数register_chrdev来注册一个名称为fb的字符设备，最后调用函数class_create在sys/class目录下创建一个graphices目录，用来描述内核的图形系统。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;模块fbmem除了会执行上述初始化工作之外，还会导出一个函数register_framebuffer:</div><div>&nbsp; &nbsp;&nbsp;</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;EXPORT_SYMBOL(register_framebuffer);</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;这个函数在内核的启动过程会被调用，以便用来执行注册帧缓存区硬件设备的操作，它的实现如下:</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//registers a frame buffer device</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">int</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">register_framebuffer(struct fb_info *fb_info)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int ret;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;mutex_lock(&amp;registration_lock);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ret = do_register_framebuffer(fb_info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;mutex_unlock(&amp;registration_lock);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">EXPORT_SYMBOL(register_framebuffer);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//真正的注册framebuffer</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int do_register_framebuffer(struct fb_info *fb_info)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int i, ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fb_event event;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fb_videomode mode;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_check_foreignness(fb_info))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -ENOSYS;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; //移除冲突的framebuffer</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ret = do_remove_conflicting_framebuffers(fb_info-&gt;apertures,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fb_info-&gt;fix.id,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fb_is_primary_device(fb_info));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (ret)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; //超过最大的FB_MAX 值为32</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (num_registered_fb == FB_MAX)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -ENXIO;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;num_registered_fb++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0 ; i &lt; FB_MAX; i++)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!registered_fb[i])</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;node = i;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;atomic_set(&amp;fb_info-&gt;count, 1);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;mutex_init(&amp;fb_info-&gt;lock);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;mutex_init(&amp;fb_info-&gt;mm_lock);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; //creates a device and registers it with sysfs</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;dev = device_create(fb_class, fb_info-&gt;device,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MKDEV(FB_MAJOR, i), NULL, &quot;fb%d&quot;, i);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (IS_ERR(fb_info-&gt;dev)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Not fatal */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printk(KERN_WARNING &quot;Unable to create device for framebuffer %d; errno = %ld\n&quot;, i, PTR_ERR(fb_info-&gt;dev));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;dev = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;} else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_init_device(fb_info);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_info-&gt;pixmap.addr == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.addr = kmalloc(FBPIXMAPSIZE, GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fb_info-&gt;pixmap.addr) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.size = FBPIXMAPSIZE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.buf_align = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.scan_align = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.access_align = 32;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.flags = FB_PIXMAP_DEFAULT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.offset = 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!fb_info-&gt;pixmap.blit_x)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.blit_x = ~(u32)0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!fb_info-&gt;pixmap.blit_y)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_info-&gt;pixmap.blit_y = ~(u32)0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!fb_info-&gt;modelist.prev || !fb_info-&gt;modelist.next)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD(&amp;fb_info-&gt;modelist);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_info-&gt;skip_vt_switch)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pm_vt_switch_required(fb_info-&gt;dev, false);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pm_vt_switch_required(fb_info-&gt;dev, true);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_var_to_videomode(&amp;mode, &amp;fb_info-&gt;var);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_add_videomode(&amp;mode, &amp;fb_info-&gt;modelist);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;registered_fb[i] = fb_info;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;event.info = fb_info;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;console_lock();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!lock_fb_info(fb_info)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console_unlock();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -ENODEV;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_notifier_call_chain(FB_EVENT_FB_REGISTERED, &amp;event);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;unlock_fb_info(fb_info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;console_unlock();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//移除多余的framebuffer</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int do_remove_conflicting_framebuffers(struct apertures_struct *a,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *name, bool primary)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int i, ret;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/* check all firmware fbs and kick off if the base addr overlaps */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0 ; i &lt; FB_MAX; i++) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct apertures_struct *gen_aper;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!registered_fb[i])</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(registered_fb[i]-&gt;flags &amp; FBINFO_MISC_FIRMWARE))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gen_aper = registered_fb[i]-&gt;apertures;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fb_do_apertures_overlap(gen_aper, a) ||</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(primary &amp;&amp; gen_aper &amp;&amp; gen_aper-&gt;count &amp;&amp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gen_aper-&gt;ranges[0].base == VGA_FB_PHYS)) {</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printk(KERN_INFO &quot;fb: switching to %s from %s\n&quot;,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name, registered_fb[i]-&gt;fix.id);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = do_unregister_framebuffer(registered_fb[i]);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//creates a device and registers it with sysfs</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">struct device *device_create(struct class *class, struct device *parent,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev_t devt, void *drvdata, const char *fmt, ...)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;va_list vargs;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct device *dev;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;va_start(vargs, fmt);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;dev = device_create_vargs(class, parent, devt, drvdata, fmt, vargs);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;va_end(vargs);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return dev;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">EXPORT_SYMBOL_GPL(device_create);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">int device_register(struct device *dev)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;device_initialize(dev);//通过调用内核的代码初始化，并将dev加到device中去</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return device_add(dev);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;由于系统中可能会存在多个帧缓冲区硬件设备，因此，fbmem模块使用一个数组register_fb保存所有的已经注册了的帧缓冲区硬件设备，其中，每一个帧缓冲区硬件都是使用一个结构体fb_info来描述的。</div><div>&nbsp; &nbsp; &nbsp;在Linux内核中，每一个硬件设备都有一个主设备号和一个从设备号，他们用来标识一个硬件设备。对于帧缓存区硬件设备来说，它们的主设备号定义为FB_MAJOR(29),而从设备号则与注册的顺序有关，它们的值依次等于0，1，2等。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;<span style="color: rgb(4, 51, 255);">每一个被注册的帧缓冲区硬件设备在/dev/graphics目录下都有一个对应的设备文件fb&lt;minor&gt;，其中,&lt;minor&gt;标识一个从设备号。例如，第一个被注册的帧缓冲区硬件设备在/dev/graphics目录下都有一个对应的设备文件fb0。用户空间的应用程序通过这个设备文件就可以操作帧缓冲区硬件设备了，即使要显示的画面渲染到帧缓冲区硬件设备上去。</span></div><div><span style="background-color: rgb(255, 250, 165); color: rgb(4, 51, 255);-evernote-highlight:true;">%这个理解是怎么处理的，究竟是从那段代码中得出需要重新回顾%</span></div><div>&nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; &nbsp;这个函数最后会通过调用函数fb_notifier_call_chain来通知帧缓冲区控制台，有一个新的帧缓冲区设备被注册到内核中来了。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;帧缓冲区控制台在内核中对应的驱动程序模块为fbcon，它实现在文件kernel/goldfish/drivers/video/console/fbcon.c中，它的初始化函数如下所示:</div><div>&nbsp; &nbsp;&nbsp;</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static struct notifier_block fbcon_event_notifier = {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;.notifier_call = fbcon_event_notify,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">};</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int __init fb_console_init(void)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int i;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;acquire_console_sem();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fb_register_client(&amp;fbcon_event_notifier);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fbcon_device = device_create(fb_class, NULL, MKDEV(0, 0) , NULL, &quot;fbcon&quot;);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(IS_ERR(fbcon_device)){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printk(KERN_WARNING &quot;Unable to create device &quot; &quot;for fbcon;errno = %ld\n&quot;, PTR_ERR(fbcon_device));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fbcon_device = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fbcon_init_device();</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;for(int i = 0; i &lt; MAX_NR_CONSOLES; i++)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; con2fb_map[i] = -1;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;release_console_sem();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fbcon_start();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;这个函数除了会调用device_create来创建一个类别为graphics的设备fbcon之外，还有调用函数fb_register_client来监听帧缓存区硬件设备的注册事件，这是由fbcon_event_notify来实现的，如下所示：</div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int fbcon_event_notify(struct notifier_block *self, unsigned long action, void *data)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;struct fb_event *event = data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;struct fb_info *info = event-&gt;info;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;...........</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int ret = 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;...........</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;switch(action){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;...........</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;case FB_EVENT_FB_REGISTERED</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = fbcon_fb_registered(info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;...........</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">done:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>帧缓冲区硬件设备的注册事件最终是由函数fbcon_fb_registered来处理的，它的实现如下所示：</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int fbcon_fb_registered(struct fb_info *info)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int ret = 0, i, idx = info-&gt;node;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fbcon_select_primary(info);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(info_index == -1){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(i = first_fb_vc; i &lt;= last_fb_vc; i++)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(con2fb_map_boot[i] == idx){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;info_idx = idx;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(info_idex != -1)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret = fbcon_takeover(1);/*4.4内核调用的是do_fbcon_takeover*/</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for(i = first_fb_vc; i &lt;= last_fb_vc; i++)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(con2fb_map_boot[i] == idx)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; set_con2fb_map(i, idx, -);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return ret;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;函数fbcon_select_primary用来检查当前注册的帧缓冲区硬件设备是否是一个主帧缓冲区硬件设备。如果是的话，那么就将它的信息记录下来。这个函数只有当指定了CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY编译选项时才有效，否则的话，它是一个空函数。</div><div><br/></div><div>&nbsp; &nbsp; <span style="color: rgb(4, 51, 255);">&nbsp;在Linux内核中，每一个控制台和每一个帧缓冲区硬件设备都有一个从0开始的编号，它们的初始对应关系保存在全局数组con2fb_map_boot中。控制台和帧缓冲区硬件设备的初始化对应关系是可以通过设置内核启动参数来初始化的。在模块fbcon中，还有另外一个全局数组con2fb_map,也是用来映射控制台和帧缓冲区硬件设备的对应关系，不过它的映射的是控制台和帧缓冲区硬件设备的实际对应关系。</span></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;全局变量first_fb_vc和last_fb_vc是全局数组con2fb_map_boot和con2fb_map的索引值，用来指定系统当前的可用的控制台编号范围，它们也是可以通过设置内核启动参数来初始化的。全局变量first_fb_vc的默认值等于0，而全局变量last_fb_vc的默认值等于MAX_NR_CONSOLES -1。</div><div><br/></div><div><span style="color: rgb(255, 147, 0);">函数fbcon_fb_registered</span></div><div>&nbsp; &nbsp; &nbsp;全局变量info_idx表示系统当前所使用的帧缓冲区硬件的编号。如果它的值等于-1， 那么就说明系统当前还没有设置好当前所使用的帧缓冲区硬件设备。在这种情况下，函数fbcon_fb_registered就会在全局数组con2fb_map_boot中检查是否存在一个控制台编号与当前所注册的帧缓冲区硬件设备的编号idx对应。如果存在的话，那么就会将当前所注册的帧缓冲区硬件设备编号idx保存在全局变量info_idx中。接下来还会调用函数fbcon_takeover<span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">(do_fbcon_takeover内核4.4是该函数)</span>来初始化系统所使用的控制台。在调用函数fbcon_takeover<span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">(do_fbcon_takeover内核4.4是该函数)</span>的时候，传进去的参数为1，表示要显示的第一个开机画面。</div><div><br/></div><div><span style="color: rgb(255, 147, 0);">函数fbcon_fb_registered</span></div><div>&nbsp; &nbsp; &nbsp;如果全局变量info_idx的值不等于-1，那么函数fbcon_fb_registered同样会在全局数组con2fb_map_boot中检查是否存在一个控制台编号与当前所注册的帧缓存区硬件设备的编号idx对应。如果存在的话，那么就会调用函数set_con2fb_map来调整当前所注册的帧缓冲区硬件设备与控制台的映射关系，即调整数组con2fb_map_boot和con2fb_map的值。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;为了简单理解，假设系统只有一个帧缓冲区硬件设备，这样当她被注册的时候，全局变量info_idx的值就会等于-1。当函数fbcon_fb_registered在全局数组con2fb_map_boot中发现有一个控制台的编号与这个帧缓冲区硬件设备的编号idx对应时，接下来就会调用fbcon_takeover来设置系统所使用的控制台。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;函数fbcon_takeover<span style="background-color: rgb(255, 250, 165);-evernote-highlight:true;">(do_fbcon_takeover内核4.4是该函数，其实代码是一样的)</span>的实现如下：</div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int fbcon_takeover(int show_logo)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int err, i;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(!num_registered_fb)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -ENODEV;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(!show_logo)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logo_shown = FBCON_LOGO_DONTSHOW;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;for(i = first_fb_vc; i &lt;= last_fb_vc; i++)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; con2fb_map[i] = info_idx;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;err = take_over_console(&amp;fb_con, first_fb_vc, last_fb_vc, fbcon_is_default);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(err){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for(i = first_fb_vc; i &lt;= last_fb_vc; i++)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;con2fb_map[i] = -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; info_idx = -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return err;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;全局变量logo_shown的初始化的值为FBCON_LOGO_CANSHOW，表示可以显示第一个开机画面。当参数show_logo的值等于0的时候，全局变量logo_shown的值会被重新设置为FBCON_LOGO_DONTSHOW，表示不可以显示第一个开机画面。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;中间的for循环将当前可用的控制台的编号都映射到当前注册的帧缓冲区硬件设备的编号info_idx中去，表示当前可用的控制台与帧缓冲区硬件设备的实际映射关系。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;函数take_over_console用来初始化系统当前使用的控制台。如果它返回的值不为0，那么就表示初始化失败。在这种情况下，最后的for循环就会将全局数组con2fb_map的各个元素的值都设置为-1，表示系统当前可用的控制台还没有映射到实际的帧缓冲区硬件设备中去。这时候全局变量info_idx的值也会重新设置为-1.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div>&nbsp; &nbsp; 调用函数take_over_console来初始化系统当前所使用的控制台，实际上就是向系统注册一系列回调函数，以便系统可以通过这些回调函数来操作当前所使用的控制台。这些回调函数使用结构体consw来描述。这里所注册的结构体consw是由全局变量fb_con来指定的，它的定义如下所示:</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">/*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">*&nbsp;&nbsp;The console `switch&apos; structure for the frame buffer based console</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">*/</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static const struct consw fb_con = {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.owner&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= THIS_MODULE,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_startup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_startup,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_init,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_deinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_deinit,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_clear&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_clear,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_putc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_putc,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_putcs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_putcs,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_cursor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_cursor,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_scroll&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_scroll,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_bmove&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_bmove,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_switch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_switch,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_blank&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_blank,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_font_set&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_set_font,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_font_get&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_get_font,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_font_default&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_set_def_font,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_font_copy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_copy_font,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_set_palette&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_set_palette,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_scrolldelta&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_scrolldelta,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_set_origin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_set_origin,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_invert_region&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_invert_region,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_screen_pos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_screen_pos,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_getxy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_getxy,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_resize&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_resize,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_debug_enter&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_debug_enter,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;.con_debug_leave&nbsp;&nbsp;&nbsp;&nbsp;= fbcon_debug_leave,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">};</span></div></div><div><br/></div><div><span style="color: rgb(148, 33, 146);">知识补充-</span><span style="background-color: rgb(255, 250, 165); color: rgb(148, 33, 146); font-weight: bold;-evernote-highlight:true;">EXPORT_SYMBOL</span><span style="color: rgb(148, 33, 146);">解析</span></div><div><br/></div><div><span style="color: rgb(148, 33, 146);">一般我们编写c程序时，要调用某个文件中的函数，需要在本文件中包含被声明的被调用函数的头文件，然后编译连接后，方能找到调用函数，而对于模块依赖的情况，不能简单的使用上面的方法，内核提供了一个机制，就是EXPORT_SYMBOL标签内定义的函数或者符号对全部内核代码公开，不用修改内核代码就可以在您的内核模块中直接调用，即使用EXPORT_SYMBOL可以将一个函数以符号的方式导出给其他模块使用。还可以手工修改内核源代码来导出其他函数，用于重新编译并加载新内核后的测试。</span></div><div><br/></div><div><span style="color: rgb(148, 33, 146);">使用方法：</span></div><div><span style="color: rgb(148, 33, 146);">1.在模块函数定义之后使用EXPORT_SYMBOL(函数名)</span></div><div><span style="color: rgb(148, 33, 146);">2.在调用该函数的模块中使用extern对之声明</span></div><div><span style="color: rgb(148, 33, 146);">3.首先加载定义该函数的模块，再加载调用该函数的模块</span></div><div><br/></div><div><br/></div><div>&nbsp; &nbsp; 接下来我们主要关注函数fbcon_init和fbcon_switch的实现，系统就是通过它来初始化和切换控制台的。在初始化的过程中，会决定是否准备第一个开机的画面，而在切换控制台的时候，会决定是否显示第一个开机的画面的内容。</div><div><br/></div><div>&nbsp; &nbsp; 函数fbcon_init的实现如下：</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static void fbcon_init(struct vc_data *vc, int init)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fb_info *info = registered_fb[con2fb_map[vc-&gt;vc_num]];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fbcon_ops *ops;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct vc_data **default_mode = vc-&gt;vc_display_fg;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct vc_data *svc = *default_mode;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct display *t, *p = &amp;fb_display[vc-&gt;vc_num];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int logo = 1, new_rows, new_cols, rows, cols, charcnt = 256;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int cap, ret;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (info_idx == -1 || info == NULL)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;cap = info-&gt;flags;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (vc != svc || logo_shown == FBCON_LOGO_DONTSHOW ||</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(info-&gt;fix.type == FB_TYPE_TEXT))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (var_to_display(p, &amp;info-&gt;var, info))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!info-&gt;fbcon_par)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con2fb_acquire_newinfo(vc, info, vc-&gt;vc_num, -1);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/* If we are not the first console on this</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb, copy the font from that console */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;t = &amp;fb_display[fg_console];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!p-&gt;fontdata) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t-&gt;fontdata) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct vc_data *fvc = vc_cons[fg_console].d;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_font.data = (void *)(p-&gt;fontdata =</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fvc-&gt;vc_font.data);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_font.width = fvc-&gt;vc_font.width;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_font.height = fvc-&gt;vc_font.height;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;userfont = t-&gt;userfont;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;userfont)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REFCOUNT(p-&gt;fontdata)++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const struct font_desc *font = NULL;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!fontname[0] || !(font = find_font(fontname)))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font = get_default_font(info-&gt;var.xres,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;var.yres,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;pixmap.blit_x,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;pixmap.blit_y);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_font.width = font-&gt;width;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_font.height = font-&gt;height;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_font.data = (void *)(p-&gt;fontdata = font-&gt;data);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_font.charcount = 256; /* FIXME&nbsp;&nbsp;Need to</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;support more fonts */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;userfont)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;charcnt = FNTCHARCNT(p-&gt;fontdata);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_panic_force_write = !!(info-&gt;flags &amp; FBINFO_CAN_FORCE_OUTPUT);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_can_do_color = (fb_get_color_depth(&amp;info-&gt;var, &amp;info-&gt;fix)!=1);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_complement_mask = vc-&gt;vc_can_do_color ? 0x7700 : 0x0800;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (charcnt == 256) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_hi_font_mask = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;} else {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_hi_font_mask = 0x100;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (vc-&gt;vc_can_do_color)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_complement_mask &lt;&lt;= 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!*svc-&gt;vc_uni_pagedir_loc)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con_set_default_unimap(svc);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!*vc-&gt;vc_uni_pagedir_loc)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;con_copy_unimap(vc, svc);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ops = info-&gt;fbcon_par;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;cur_blink_jiffies = msecs_to_jiffies(vc-&gt;vc_cur_blink_ms);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;con_rotate = initial_rotation;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;set_blitting_type(vc, info);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;cols = vc-&gt;vc_cols;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;rows = vc-&gt;vc_rows;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;new_cols = FBCON_SWAP(ops-&gt;rotate, info-&gt;var.xres, info-&gt;var.yres);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;new_rows = FBCON_SWAP(ops-&gt;rotate, info-&gt;var.yres, info-&gt;var.xres);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;new_cols /= vc-&gt;vc_font.width;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;new_rows /= vc-&gt;vc_font.height;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* We must always set the mode. The mode of the previous console</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* driver could be in the same resolution but we are using different</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* hardware so we have to initialize the hardware.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* We need to do it in fbcon_init() to prevent screen corruption.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (CON_IS_VISIBLE(vc) &amp;&amp; vc-&gt;vc_mode == KD_TEXT) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (info-&gt;fbops-&gt;fb_set_par &amp;&amp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!(ops-&gt;flags &amp; FBCON_FLAGS_INIT)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = info-&gt;fbops-&gt;fb_set_par(info);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printk(KERN_ERR &quot;fbcon_init: detected &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;unhandled fb_set_par error, &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;error code %d\n&quot;, ret);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;flags |= FBCON_FLAGS_INIT;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;graphics = 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if ((cap &amp; FBINFO_HWACCEL_COPYAREA) &amp;&amp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!(cap &amp; FBINFO_HWACCEL_DISABLED))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;scrollmode = SCROLL_MOVE;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;else /* default to something safe */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p-&gt;scrollmode = SCROLL_REDRAW;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;++guenther: console.c:vc_allocate() relies on initializing</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;vc_{cols,rows}, but we must not set those if we are only</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;resizing the console.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (init) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_cols = new_cols;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_rows = new_rows;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;} else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_resize(vc, new_cols, new_rows);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (logo)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fbcon_prepare_logo(vc, info, cols, rows, new_cols, new_rows);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (vc == svc &amp;&amp; softback_buf)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fbcon_update_softback(vc);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (ops-&gt;rotate_font &amp;&amp; ops-&gt;rotate_font(info, vc)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;rotate = FB_ROTATE_UR;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_blitting_type(vc, info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;p = &amp;fb_display[fg_console];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div></div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp;&nbsp; &nbsp;当前正在初始化的控制台使用参数vc来描述，而他的成员变量vc_num用来描述当前正在初始化的控制台的编号。通过这个编号之后，就可以在全局数组con2fb_map中找到的对应帧缓冲区的硬件设备编号，通过这个编号，就可以在另外一个全局数组中registered_fb中找到一个fb_info的结构体info,用来描述与当前正在初始化的控制台所对应的帧缓冲区的硬件设备。</div><div><br/></div><div>&nbsp; &nbsp; 参数vc的成员变量vc_display_fg用来描述系统当前可见的控制台，它是一个类型为vc_data**的指针。从这里就可以看出，最终得到的vc_data结构体svc就是用来描述系统当前可见的控制台。</div><div><br/></div><div>&nbsp; &nbsp; 变量logo开始的时候被设置为1，表示需要显示的第一个开机画面，但是在以下三种情况下，它的值会被设置为0，表示不需要显示开机画面。</div><div>&nbsp;&nbsp; &nbsp;</div><div>&nbsp; &nbsp; A.参数vc和变量svc指向的不是同一个vc_data结构体，即当前正在初始化的控制台不是系统可见的控制台。</div><div><br/></div><div>&nbsp; &nbsp; B.全局变量logo_shown的值等于FBCON_LOGO_DONTSHOW，即系统不需要显示第一个开机画面。</div><div><br/></div><div>&nbsp; &nbsp; c.与当前正在初始化的控制台所对应的帧缓冲区硬件设备的显示方式被设置为文本方式，即info-&gt;fix.type的值等于FB_TYPE_TEXT。</div><div><br/></div><div>&nbsp; &nbsp; 当最终得到的变量logo的值等于1的时候，接下来就会调用函数fbcon_prepare_logo来准备要显示的第一个开机画面的内容。</div><div><br/></div><div>&nbsp; &nbsp; 在函数fbcon_prepare_logo中，第一个开机画面的内容是通过调用函数fb_prepare_logo来准备的，如下所示：</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef MODULE</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static void fbcon_prepare_logo(struct vc_data *vc, struct fb_info *info,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int cols, int rows, int new_cols, int new_rows)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;logo_shown = FBCON_LOGO_DONTSHOW;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static void fbcon_prepare_logo(struct vc_data *vc, struct fb_info *info,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int cols, int rows, int new_cols, int new_rows)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/* Need to make room for the logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fbcon_ops *ops = info-&gt;fbcon_par;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int cnt, erase = vc-&gt;vc_video_erase_char, step;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;unsigned short *save = NULL, *r, *q;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int logo_height;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (info-&gt;flags &amp; FBINFO_MODULE) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo_shown = FBCON_LOGO_DONTSHOW;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* remove underline attribute from erase character</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* if black and white framebuffer.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_get_color_depth(&amp;info-&gt;var, &amp;info-&gt;fix) == 1)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;erase &amp;= ~0x400;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;logo_height = fb_prepare_logo(info, ops-&gt;rotate);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;logo_lines = DIV_ROUND_UP(logo_height, vc-&gt;vc_font.height);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;q = (unsigned short *) (vc-&gt;vc_origin +</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_size_row * rows);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;step = logo_lines * cols;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;for (r = q - logo_lines * cols; r &lt; q; r++)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (scr_readw(r) != vc-&gt;vc_video_erase_char)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (r != q &amp;&amp; new_rows &gt;= rows + logo_lines) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;save = kmalloc(logo_lines * new_cols * 2, GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (save) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = cols &lt; new_cols ? cols : new_cols;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scr_memsetw(save, erase, logo_lines * new_cols * 2);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = q - step;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (cnt = 0; cnt &lt; logo_lines; cnt++, r += i)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scr_memcpyw(save + cnt * new_cols, r, 2 * i);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = q;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (r == q) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* We can scroll screen down */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = q - step - cols;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (cnt = rows - logo_lines; cnt &gt; 0; cnt--) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scr_memcpyw(r + step, r, vc-&gt;vc_size_row);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r -= cols;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!save) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int lines;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (vc-&gt;vc_y + logo_lines &gt;= rows)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lines = rows - vc-&gt;vc_y - 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lines = logo_lines;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_y += lines;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_pos += lines * vc-&gt;vc_size_row;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;scr_memsetw((unsigned short *) vc-&gt;vc_origin,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;erase,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_size_row * logo_lines);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (CON_IS_VISIBLE(vc) &amp;&amp; vc-&gt;vc_mode == KD_TEXT) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fbcon_clear_margins(vc, 0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;update_screen(vc);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (save) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q = (unsigned short *) (vc-&gt;vc_origin +</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_size_row *</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scr_memcpyw(q, save, logo_lines * new_cols * 2);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_y += logo_lines;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_pos += logo_lines * vc-&gt;vc_size_row;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kfree(save);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (logo_lines &gt; vc-&gt;vc_bottom) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo_shown = FBCON_LOGO_CANSHOW;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printk(KERN_INFO</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;fbcon_init: disable boot-logo (boot-logo bigger than screen).\n&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;} else if (logo_shown != FBCON_LOGO_DONTSHOW) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo_shown = FBCON_LOGO_DRAW;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_top = logo_lines;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif /* MODULE */</span></div><div><br/></div></div><div><br/></div><div>&nbsp; &nbsp; 从函数fb_prepare_logo返回来之后，如果要显示的第一个开机画面所占用的控制台行数小于等于参数vc所描述的控制台的最大行数，并且全局变量logo_show的值不等于FBCON_LOGO_DONTSHOW,那么就说明前面提到的第一个开机画面可以显示在控制台中。这时候全局变量logo_show的值就会被设置为FBCON_LOGO_DRAW,表示第一个开机画面处于等待渲染的状态。</div><div><br/></div><div>&nbsp; &nbsp; 函数fb_prepare_logo实现在文件kernel/goldfish/drivers/video/fbmem.c中，如下所示：</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">int fb_prepare_logo(struct fb_info *info, int rotate)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int depth = fb_get_color_depth(&amp;info-&gt;var, &amp;info-&gt;fix);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;unsigned int yres;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;memset(&amp;fb_logo, 0, sizeof(struct logo_data));</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (info-&gt;flags &amp; FBINFO_MISC_TILEBLITTING ||</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;flags &amp; FBINFO_MODULE)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (info-&gt;fix.visual == FB_VISUAL_DIRECTCOLOR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depth = info-&gt;var.blue.length;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (info-&gt;var.red.length &lt; depth)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depth = info-&gt;var.red.length;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (info-&gt;var.green.length &lt; depth)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depth = info-&gt;var.green.length;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (info-&gt;fix.visual == FB_VISUAL_STATIC_PSEUDOCOLOR &amp;&amp; depth &gt; 4) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* assume console colormap */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depth = 4;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/* Return if no suitable logo was found */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.logo = fb_find_logo(depth);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!fb_logo.logo) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (rotate == FB_ROTATE_UR || rotate == FB_ROTATE_UD)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yres = info-&gt;var.yres;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yres = info-&gt;var.xres;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_logo.logo-&gt;height &gt; yres) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.logo = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/* What depth we asked for might be different from what we get */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_logo.logo-&gt;type == LINUX_LOGO_CLUT224)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.depth = 8;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;else if (fb_logo.logo-&gt;type == LINUX_LOGO_VGA16)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.depth = 4;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.depth = 1;</span></div><div><br/></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fb_logo.depth &gt; 4 &amp;&amp; depth &gt; 4) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (info-&gt;fix.visual) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case FB_VISUAL_TRUECOLOR:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.needs_truepalette = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case FB_VISUAL_DIRECTCOLOR:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.needs_directpalette = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.needs_cmapreset = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case FB_VISUAL_PSEUDOCOLOR:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.needs_cmapreset = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return fb_prepare_extra_logos(info, fb_logo.logo-&gt;height, yres);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div></div><div><br/></div><div>&nbsp; &nbsp; 这个函数首先得到参数info所描述的帧缓冲区硬件设备的颜色深度depth，接着再调用函数fb_find_logo来获得要显示的第一个开机画面的内容，并且保存在全局变量fb_logo的成员变量logo中。</div><div><br/></div><div>&nbsp; &nbsp; 函数fb_find_logo实现在文件kernel/goldfish/drivers/video/logo/logo.c文件中，如下所示：</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static bool nologo;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">module_param(nologo, bool, 0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">MODULE_PARM_DESC(nologo, &quot;Disables startup logo&quot;);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">/*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">* Logos are located in the initdata, and will be freed in kernel_init.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">* Use late_init to mark the logos as freed to prevent any further use.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">*/</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static bool logos_freed;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int __init fb_logo_late_init(void)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;logos_freed = true;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">late_initcall(fb_logo_late_init);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">/* logo&apos;s are marked __initdata. Use __init_refok to tell</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">* modpost that it is intended that this function uses data</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">* marked __initdata.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">*/</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">const struct linux_logo * __init_refok fb_find_logo(int depth)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;const struct linux_logo *logo = NULL;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (nologo || logos_freed)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (depth &gt;= 1) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_LINUX_MONO</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Generic Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_linux_mono;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_SUPERH_MONO</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* SuperH Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_superh_mono;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (depth &gt;= 4) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_LINUX_VGA16</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Generic Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_linux_vga16;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_BLACKFIN_VGA16</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Blackfin processor logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_blackfin_vga16;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_SUPERH_VGA16</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* SuperH Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_superh_vga16;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (depth &gt;= 8) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_LINUX_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Generic Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_linux_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_BLACKFIN_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Blackfin Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_blackfin_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_DEC_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* DEC Linux logo on MIPS/MIPS64 or ALPHA */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_dec_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_MAC_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Macintosh Linux logo on m68k */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (MACH_IS_MAC)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_mac_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_PARISC_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* PA-RISC Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_parisc_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_SGI_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* SGI Linux logo on MIPS/MIPS64 */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_sgi_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_SUN_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Sun Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_sun_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_SUPERH_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* SuperH Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_superh_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#ifdef CONFIG_LOGO_M32R_CLUT224</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* M32R Linux logo */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo = &amp;logo_m32r_clut224;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#endif</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return logo;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">EXPORT_SYMBOL_GPL(fb_find_logo);</span></div></div><div><br/></div><div>&nbsp; &nbsp; 文件开始声明了一系列linux_logo结构体变量分别用来保存kernel/goldfish/drivers/video/logo目录下的一系列ppm或者pbm文件的内容的。这些ppm或者pbm文件都是用来描述第一个开机画面的。</div><div><br/></div><div>&nbsp; &nbsp; 全局变量nologo是一个类型为bool变量的模块参数，它的默认值等于0，表示要显示的第一个开机画面。在这种情况下，函数fb_find_logo就会根据参数depth的值以及不同的编译选项来选择第一个开机画面的内容，并且保存在变量logo中返回给调用者。</div><div><br/></div><div>&nbsp; &nbsp; 这一步执行完成之后，第一个开机画面的内容就会保存在模块fbmem的全局变量fb_logo的成员变量logo中了。这时候控制台的初始化也就结束了，接下来系统会执行切换控制台的操作。前面提到，当系统执行切换控制台的操作的时候，模块fbcon中的函数fbcon_switch就会被调用。在调用的过程中，就会执行显示第一个开机画面的操作。</div><div><br/></div><div>&nbsp; &nbsp; 函数fbcon_switch实现在文件kernel/goldfish/drivers/video/console/fbcon.c中，显示第一个开机画面的过程如下所示：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int fbcon_switch(struct vc_data *vc)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fb_info *info, *old_info = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fbcon_ops *ops;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct display *p = &amp;fb_display[vc-&gt;vc_num];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fb_var_screeninfo var;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int i, ret, prev_console, charcnt = 256;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;info = registered_fb[con2fb_map[vc-&gt;vc_num]];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ops = info-&gt;fbcon_par;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (softback_top) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (softback_lines)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fbcon_set_origin(vc);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;softback_top = softback_curr = softback_in = softback_buf;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;softback_lines = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fbcon_update_softback(vc);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (logo_shown &gt;= 0) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct vc_data *conp2 = vc_cons[logo_shown].d;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (conp2-&gt;vc_top == logo_lines</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; conp2-&gt;vc_bottom == conp2-&gt;vc_rows)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conp2-&gt;vc_top = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo_shown = FBCON_LOGO_CANSHOW;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;prev_console = ops-&gt;currcon;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (prev_console != -1)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;old_info = registered_fb[con2fb_map[prev_console]];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* FIXME: If we have multiple fbdev&apos;s loaded, we need to</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* update all info-&gt;currcon.&nbsp;&nbsp;Perhaps, we can place this</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* in a centralized structure, but this might break some</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* drivers.</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* info-&gt;currcon = vc-&gt;vc_num;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; FB_MAX; i++) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (registered_fb[i] != NULL &amp;&amp; registered_fb[i]-&gt;fbcon_par) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct fbcon_ops *o = registered_fb[i]-&gt;fbcon_par;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o-&gt;currcon = vc-&gt;vc_num;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;memset(&amp;var, 0, sizeof(struct fb_var_screeninfo));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;display_to_var(&amp;var, p);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;var.activate = FB_ACTIVATE_NOW;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/*</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* make sure we don&apos;t unnecessarily trip the memcmp()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* in fb_set_var()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;var.activate = var.activate;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;var.vmode |= info-&gt;var.vmode &amp; ~FB_VMODE_MASK;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_set_var(info, &amp;var);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;var = info-&gt;var;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (old_info != NULL &amp;&amp; (old_info != info ||</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;flags &amp; FBINFO_MISC_ALWAYS_SETPAR)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (info-&gt;fbops-&gt;fb_set_par) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = info-&gt;fbops-&gt;fb_set_par(info);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printk(KERN_ERR &quot;fbcon_switch: detected &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;unhandled fb_set_par error, &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;error code %d\n&quot;, ret);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (old_info != info)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fbcon_del_cursor_timer(old_info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fbcon_is_inactive(vc, info) ||</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;blank_state != FB_BLANK_UNBLANK)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fbcon_del_cursor_timer(info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fbcon_add_cursor_timer(info);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;set_blitting_type(vc, info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;cursor_reset = 1;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (ops-&gt;rotate_font &amp;&amp; ops-&gt;rotate_font(info, vc)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;rotate = FB_ROTATE_UR;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_blitting_type(vc, info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_can_do_color = (fb_get_color_depth(&amp;info-&gt;var, &amp;info-&gt;fix)!=1);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_complement_mask = vc-&gt;vc_can_do_color ? 0x7700 : 0x0800;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (p-&gt;userfont)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;charcnt = FNTCHARCNT(vc-&gt;vc_font.data);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (charcnt &gt; 256)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_complement_mask &lt;&lt;= 1;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;updatescrollmode(p, info, vc);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;switch (p-&gt;scrollmode) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;case SCROLL_WRAP_MOVE:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrollback_phys_max = p-&gt;vrows - vc-&gt;vc_rows;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;case SCROLL_PAN_MOVE:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;case SCROLL_PAN_REDRAW:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrollback_phys_max = p-&gt;vrows - 2 * vc-&gt;vc_rows;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (scrollback_phys_max &lt; 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrollback_phys_max = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;default:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrollback_phys_max = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;scrollback_max = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;scrollback_current = 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (!fbcon_is_inactive(vc, info)) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;var.xoffset = ops-&gt;var.yoffset = p-&gt;yscroll = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ops-&gt;update_start(info);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fbcon_set_palette(vc, color_table);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fbcon_clear_margins(vc, 0);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (logo_shown == FBCON_LOGO_DRAW) {</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo_shown = fg_console;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* This is protected above by initmem_freed */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_show_logo(info, ops-&gt;rotate);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;update_region(vc,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_origin + vc-&gt;vc_size_row * vc-&gt;vc_top,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_size_row * (vc-&gt;vc_bottom -</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc-&gt;vc_top) / 2);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div></div><div><br/></div><div>&nbsp; &nbsp; 由于前面在准备第一个开机画面的内容的时候，全局变量logo_show的值被设置为FB_LOGO_DRAW,因此接下来就会调用函数fb_show_logo来显示第一个开机画面。在显示之前，这个函数会将全局变量logo_shown的值设置为fb_console，后者表示系统当前可见的控制台的编号。</div><div><br/></div><div>&nbsp; &nbsp; 函数fb_show_logo实现在文件kernel/drivers/video/fbmem.c文件中，如下所示：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">int fb_show_logo(struct fb_info *info, int rotate)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;int y;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;y = fb_show_logo_line(info, rotate, fb_logo.logo, 0,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num_online_cpus());</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;y = fb_show_extra_logos(info, y, rotate);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return y;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div></div><div><br/></div><div>这个函数调用另外一个函数fb_show_logo_line来进一步执行渲染第一个开机画面的操作。</div><div><br/></div><div>函数fb_show_logo_line也是实现在文件kernel/goldfish/drivers/video/fbmem.c中，如下所示:</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int fb_show_logo_line(struct fb_info *info, int rotate,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const struct linux_logo *logo, int y,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int n)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;u32 *palette = NULL, *saved_pseudo_palette = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;unsigned char *logo_new = NULL, *logo_rotate = NULL;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;struct fb_image image;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;/* Return if the frame buffer is not mapped or suspended */</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (logo == NULL || info-&gt;state != FBINFO_STATE_RUNNING ||</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;flags &amp; FBINFO_MODULE)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;image.depth = 8;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;image.data = logo-&gt;data;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_logo.needs_cmapreset)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_set_logocmap(info, logo);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_logo.needs_truepalette ||</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_logo.needs_directpalette) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;palette = kmalloc(256 * 4, GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (palette == NULL)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fb_logo.needs_truepalette)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_set_logo_truepalette(info, logo, palette);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_set_logo_directpalette(info, logo, palette);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saved_pseudo_palette = info-&gt;pseudo_palette;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;pseudo_palette = palette;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (fb_logo.depth &lt;= 4) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo_new = kmalloc(logo-&gt;width * logo-&gt;height, GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (logo_new == NULL) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kfree(palette);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (saved_pseudo_palette)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;pseudo_palette = saved_pseudo_palette;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.data = logo_new;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_set_logo(info, logo, logo_new, fb_logo.depth);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;image.dx = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;image.dy = y;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;image.width = logo-&gt;width;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;image.height = logo-&gt;height;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (rotate) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo_rotate = kmalloc(logo-&gt;width *</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logo-&gt;height, GFP_KERNEL);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (logo_rotate)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fb_rotate_logo(info, logo_rotate, &amp;image, rotate);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;fb_do_show_logo(info, &amp;image, rotate, n);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;kfree(palette);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (saved_pseudo_palette != NULL)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;pseudo_palette = saved_pseudo_palette;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;kfree(logo_new);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;kfree(logo_rotate);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;return logo-&gt;height;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div></div><div><br/></div><div>&nbsp; &nbsp; 参数logo指向了前面所准备的第一个开机画面的内容。这个函数首先根据参数logo的内容来构造一个fb_image的结构体image，用来描述最终要显示的第一个开机画面。最后就调用函数fb_do_show_logo来真正执行第一个渲染开机画面的操作。</div><div><br/></div><div>&nbsp; &nbsp; 函数fb_do_show_logo也是实现在文件kernel/drivers/video/fbmem.c中，如下所示：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static void fb_do_show_logo(struct fb_info *info, struct fb_image *image,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rotate, unsigned int num)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;unsigned int x;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;if (rotate == FB_ROTATE_UR) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (x = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x &lt; num &amp;&amp; image-&gt;dx + image-&gt;width &lt;= info-&gt;var.xres;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x++) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;fbops-&gt;fb_imageblit(info, image);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;dx += image-&gt;width + 8;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;} else if (rotate == FB_ROTATE_UD) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (x = 0; x &lt; num; x++) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;fbops-&gt;fb_imageblit(info, image);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;dx -= image-&gt;width + 8;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;} else if (rotate == FB_ROTATE_CW) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (x = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x &lt; num &amp;&amp; image-&gt;dy + image-&gt;height &lt;= info-&gt;var.yres;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x++) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;fbops-&gt;fb_imageblit(info, image);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;dy += image-&gt;height + 8;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;} else if (rotate == FB_ROTATE_CCW) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (x = 0; x &lt; num; x++) {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;fbops-&gt;fb_imageblit(info, image);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image-&gt;dy -= image-&gt;height + 8;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div></div><div><br/></div><div>&nbsp; &nbsp; 参数rotate用来描述屏幕的当前旋转方向。屏幕旋转方向不同，第一个开机画面的渲染方式也有所不同。例如，当屏幕上下颠倒时(FB_ROTATE_UD),第一个开机画面的左右顺序也就刚好调换过来，这时候就需要从右到左来渲染。其他的三个方向FB_ROTATE_UR、FB_ROTATE_CW和FB_ROTATE_CCW分别表示没有旋转、顺时针旋转90度和逆时针旋转90度。</div><div><br/></div><div>&nbsp; &nbsp; 参数info用来描述要渲染的帧缓冲区硬件设备，它的成员变量fbops指向了一系列回调函数，用来操作帧缓冲区硬件设备，其中，回调函数fb_imageblit就是用来在指定的帧缓冲区硬件设备渲染指定的图像的。</div><div>&nbsp;&nbsp; &nbsp;</div><div>&nbsp; &nbsp; 至此，第一个开机画面的显示过程就分析完成了。</div><div><br/></div><div><br/></div><div><br/></div><div><span style="font-size: 16px;">2.第二个开机画面的显示过程</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;由于第二个开机画面是在init进程启动的过程中显示的，因此，我们就从init进程的入口函数main开始分析第二个开机画面的显示过程。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;init进程的入口函数main实现在文件system/core/init/init.c中，如下所示：</span></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">int main(int argc, char **argv){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int fd_count = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;struct pollfd ufds[4];</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;......</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int property_set_fd_init = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int signal_fd_init = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int keychord_fd_init = 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(!strcmp(basename(argv[0]), &quot;ueventd&quot;))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return ueventd_main(argc, argv);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;queue_builtin_action(console_init_action, &quot;console_init&quot;);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;for(;;){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int nr,i,timeout = -1;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; execute_one_command();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; restart_processes();</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(!property_set_fd_init &amp;&amp; get_property_set_fd() &gt; 0){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ufds[fd_count].fd = get_property_set_fd();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ufds[fd_count].events=POLLIN;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ufds[fd_count].revents=0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fd_count++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;property_set_fd_init = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(!signal_fd_init &amp;&amp; get_signal_fd() &gt; 0){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ufds[fd_count].fd = get_signal_fd();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ufds[fd_count].events = POLLIN;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ufds[fd_count].revents = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;fd_count++;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;keychord_fd_init = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(process_needs_restart){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; timeout = (process_needs_restart_gettime() * 1000);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(timeout &lt; 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;timeout = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(!action_queue_empty() || cur_action)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;timeout = 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nr = poll(ufds, fd_count, timeout);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(nr &lt;= 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;continue;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(i = 0; i &lt; fd_count; i++){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(ufds[i].fd == get_property_set_fd())</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; handle_property_set_fd();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else if(ufds[i].fd == get_keychord_fd())</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; handle_keychord();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;else if(ufds[i].fd == get_signal_fd())</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; handle_signal();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div><span style="font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 函数一开始就首先判断参数argv[0]的值是否等于“ueventd”,即当前正在启动的进程名称是否等于“ueventd”。如果是的话，那么就以ueventd_main函数来作为入口函数。这是怎么回事呢？当前正在启动的进程不是init吗？它的名称怎么可能会等于“ueventd”？原来，在目标设备上，可执行文件/sbin/ueventd是可执行文件/init的一个符号链接文件，即应用程序ueventd和init运行的是同一个可执行文件。内核启动完成之后，可执行文件/init首先会被执行，即init进程会首先被启动。init进程在启动的过程中，会对启动脚本/init.rc进行解析。在启动脚本/init.rc中，配置了一个ueventd进程，它对应得可执行文件为/sbin/ueventd，即ueventd进程加载的可执行文件也是为/init。因此，通过判断参数argv[0]的值，就可以知道当前正在启动的是init进程还是ueventd进程。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;ueventd进程是作什么用的？它是用来处理uevent事件的，即用来管理系统设备的。从前面的描述可以知道，它真正的入口函数为ueventd_main,实现在system/core/init/ueventd/c中。ueventd进程会通过一个socket接口来和内核通信，以便于可以监控系统设备事件。例如，在前面在Ubuntu上为Android系统编写驱动程序一文中，我们调用device_create函数来创建了一个名称为“hello”的字符设备，这时候内核就会向前面提到的socket发送一个设备增加的事件。ueventd进程通过这个socket获得这个设备增加事件之后，就会/dev目录下创建一个名称为“hello”的设备文件。这样用户空间的应用程序就可以通过设备文件/dev/hello来和驱动程序hello进行通信了。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;接下来，调用另外一个函数queue_builtin_action来向init进程中的一个待执行action队列增加了一个名称等于“console_init”的action。这个action对应的执行函数为console_init_action，它就是用来显示第二个开机画面的。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;函数queue_builtin_action实现在文件system/core/init/init_parser.c文件中，如下所示：</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static list_declare(action_list);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static list_declare(action_queue);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">void queue_builtin_action(int (*func)(int nargs, char **args), char* name){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;struct action *act;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;struct command *cmd;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;act = calloc(1, sizeof(*act));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;act-&gt;name = name;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;list_init(&amp;act-&gt;commands);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;cmd = calloc(1, sizeof(*cmd));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;cmd-&gt;func = func;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;cmd-&gt;args[0] = name;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;list_add_tail(&amp;act-&gt;commands, &amp;cmd-&gt;clist);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;list_add_tail(&amp;action_list, &amp;act-&gt;alist);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;action_add_queue_tail(act);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">void action_add_queue_tail(struct action *act){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;list_add_tail(&amp;action_queue, &amp;act-&gt;qlist);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; action_list列表用来保存从启动脚本/init.rc解析得到的一系列的action，以及一系列的内建的action。当这些action需要执行的时候，他们就会被添加到action_queue列表中去，以便于init进程可以执行他们。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;回到init进程的入口函数main中，最后init进程会进入到一个无限的循环中去。在这无限循环中，init进程会做以下五件事情：</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;A.调用函数execute_one_command来检查action_queue列表是否为空。如果不为空的话娿，那么init进程就会将保存在列表头中的action移除，并且执行这个被移除的action。由于前面我们将一个名称为“console_init”的action添加到了action_queue列表中，因此，在这个无限循环中，这个action就会被执行，即函数console_init_action会被调用。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;B.调用函数restart_processes来检查系统中是否有进程需要启动。在启动脚本/init.rc中，我们可以指定一个进程在退出之后会自动重新启动。在这种情况下，函数restart_processes就会检查是否存在需要重新启动的进程，如果存在的话，那么就会将它重新启动起来。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;C.处理系统属性变化的事件。当我们调用函数property_set来改变一个系统属性值时，系统就会通过一个socket(通过调用函数get_property_set_fd可以获取到它的文件描述符)来向init进程发送一个属性值改变事件通知。init进程接收到这个属性值改变事件之后，就会调用函数handle_property_set_fd来进行相应的处理。后面在分析第三个开机画面的显示过程是，我们就会看到，SurfaceFlinger服务就是通过修改“clt.start”和“ctl.stop”属性值来启动和停止第三个开机画面的。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;D.处理一种称为“chorded keyboard”的键盘输入事件。这种类型为chorded keyboard的键盘设备通过不同的按键组合来描述不同的命令或者操作，它对应的设备文件为/dev/keychord.我们可以通过调用函数get_keychord_fd来获得这个设备的文件描述符，以便于可以监控它的输入事件，并且调用函数handle_keychord来对这些输入事件进行处理。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;E.回收僵尸进程。我们知道，在Linux内核中，如果父进程不等待子进程结束就退出，那么当子进程结束的时候，就会变成一个僵尸进程，从而占用系统的资源。为了回收这些僵尸进程，init进程会安装一个SIGCHLD信号接收器。当那些父进程已经退出了的子进程退出的时候，内核就会发送一个SIGCHLD信号给init进程。init进程可以通过一个socket(通过调用函数get_signal_fd可以获得它的文件描述符)来接收到的SIGCHLD信号读取回来，并且调用函数handle_signal来对接收到的SIGCHLD信号进行处理，即回收那些已经变成僵尸的子进程。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;注意，由于后面三个事情都是可以通过文件描述符来描述的，因此，init进程的入口函数main使用poll机制来同时轮询它们，以便于可以提高效率。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;接下来，我们就重点分析console_init_action的实现，以便于可以了解第二个开机画面的显示过程：</span></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int console_init_action(int nargs, char** args){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int fd;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;char tmp[PROP_VALUE_MAX];</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(console[0]){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprintf(tmp, sizeof(tmp), &quot;/dev/%s&quot;, console);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console_name = strdup(tmp);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fd = open(console_name, O_RDWR);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(fd &gt;= 0){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; have_console = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;close(fd);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(load_565rle_image(INIT_IMAGE_FILE)){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fd = open(&quot;/dev/tty0&quot;, O_WRONLY);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(fd &gt;= 0){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;const char*msg;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;msg = &quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n&quot;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A N D R O I D &quot;;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;write(fd, msg, strlen(msg));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;close(fd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div><span style="font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个函数主要做了两件事情：</span></div><div><span style="font-size: 16px;">&nbsp; &nbsp;&nbsp;</span></div><div><span style="font-size: 19px;"><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;A.初始化控制台。init进程在启动的时候，会解析内核的启动参数(保存在文件/proc/cmdline中)。如果发现内核的启动参数中包含有了一个名称为“android boot console”的属性，那么就会将这个属性保存在字符数组console中。这样我们就可以通过设备文件/dev/&lt;console&gt;来访问系统的控制台。如果内核的启动参数没有包含名称为“androidboot.console”的属性，那么默认就通过设备文件/dev/console来范文系统的控制台。如果能够成功地打开设备文件/dev/&lt;console&gt;或者/dev/console,那么就说明系统支持访问控制台，因此，全局变量have_console的就会被设置为1.</span></span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;B.显示第二个开机画面。显示第二个开机画面是通过调用函数load_565rle_image来实现的。在调用函数load_565rle_image的时候，指定的开机画面文件为INIT_IMAGE_FILE。INIT_IMAGE_FILE是一个宏，定义在system/core/init/init.h文件中，如下所示:</span></div><div><span style="font-size: 16px;">&nbsp; &nbsp;</span></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;#define INIT_IMAGE_FILE &quot;/initlogo.rle&quot;</span></div></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;</span></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;即第二个开机画面的内容是有文件/initlogo.rle来指定的。如果文件/initlogo.rle不存在。或者在显示它的过程中出现异常，那么函数load_565rle_image的返回值就会等于-1，这时候函数console_init_action就以文本的方式来显示第二个开机画面，即向编号为0的控制台(/dev/tty0)输出“ANDROID”这7个字符。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;函数load_565rle_image实现在文件system/core/init/logo.c中，如下所示:</span></div><div><span style="font-size: 16px;">&nbsp; &nbsp;&nbsp;</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">int load_565rle_image(char *fn)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;struct FB fb;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;struct state s;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;unsigned short *data, *bits, *ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;unsigned count, max;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;int fd;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(vt_set_mode(1))</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fd = open(fn, O_RDONLY);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(fd &lt; 0){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ERROR(&quot;cannot open &apos;%s&apos;\n&quot;, fn);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; goto fail_restore_text;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(fstat(fd, &amp;s) &lt; 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; goto fail_close_file;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;data = mmap(0, s.st_size, PROT_READ, MAP_SHARED, fd, 0);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;if(data == MAP_FAILED){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; goto fail_umap_data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;max = fb_width(&amp;fb) * fb_height(&amp;fb);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;ptr = data;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;count = s.st_size;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;bits = fb.bits;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;while(count &gt; 3){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsigned n = ptr[0];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(n &gt; max)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; android_memset16(bits, ptr[1], n &lt;&lt; 1);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bits += n;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; max -= n;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ptr += 2;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; count -= 4;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;mumap(data, s.st_size);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fb_update(&amp;fb);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fb_close(&amp;fb);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;close(fd);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;unlink(fn);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">fail_umap_data:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;mumap(data, s.st_size);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">fail_close_file:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;close(fd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">fail_restore_text:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;vt_set_mode(0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;函数首先将控制台的显示方式设置为图形方式，这时通过调用函数vt_set_mode来实现的，如下所示:</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int vt_set_mode(int graphics)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; int fd, r;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; fd = open(&quot;/dev/tty0&quot;, O_RDWR | O_SYNC);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; if (fd &lt; 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; r = ioctl(fd, KDSETMODE, (void*) (graphics ? KD_GRAPHICS : KD_TEXT));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; close(fd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; return r;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;函数vt_set_mode首先打开控制台设备文件/dev/tty0,接着在通过IO控制命令KDSETMODE来将控制台的显示方式设置为文本方式或者图形方式，取决于参数graphics的值。从前面的调用过程可以知道，参数graphics的值等于1，因此这里是设置显示的方式为图形方式。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;回到函数load_565rle_image中，从前面的调用过程可以知道，参数fn的值等于&quot;/initlogo.rle&quot;,即指向目标设备中的initlogo.rle文件。函数load_565rle_image首先调用函数open打开这个文件，并且将获得的文件描述符保存在变量fd中，接着在调用函数fstate来获取这个文件的大小。有了这些信息之后，函数load_565rle_image就可以通过调用函数mmap来把文件/initlogo.rle映射到init进程的地址空间来了，以便于可以读取它的内容。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;将文件/initlogo.rle映射到init进程的地址空间之后，接下来在调用函数fb_open来打开设备文件/dev/graphics/fb0.前面在介绍第一个开机画面的显示过程中提到，设备文件/dev/graphics/fb0之后，我们就可以将文件/initlogo.rle的内容输出到帧缓冲区硬件设备中去了。</span></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;函数fb_open的实现如下：</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static int fb_open(struct FB *fb)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; fb-&gt;fd = open(&quot;/dev/graphics/fb0&quot;, O_RDWR);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; if (fb-&gt;fd &lt; 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; return -1;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; if (ioctl(fb-&gt;fd, FBIOGET_FSCREENINFO, &amp;fb-&gt;fi) &lt; 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; goto fail;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; if (ioctl(fb-&gt;fd, FBIOGET_VSCREENINFO, &amp;fb-&gt;vi) &lt; 0)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; goto fail;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; fb-&gt;bits = mmap(0, fb_size(fb), PROT_READ | PROT_WRITE,</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MAP_SHARED, fb-&gt;fd, 0);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; if (fb-&gt;bits == MAP_FAILED)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; goto fail;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; return 0;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">fail:</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; close(fb-&gt;fd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; return -1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;打开了设备文件/dev/graphics/fb0之后，接着再分别通过IO控制命令FBIOGET_FSCREENINFO和FBIOGET_VSCREENINFO来获得帧缓存硬件设备的固定信息和可变信息。固定信息使用一个fb_fix_screeninfo结构体来描述，它保存的是帧缓冲区硬件设备可变的特性，这些特性在系统运行的期间是可变的，例如屏幕所使用的分辨率、颜色深度以及颜色格式等。</span></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;除了获得帧缓冲区硬件设备的固定信息和可变信息以外，函数fb_open还会将设备文件/dev/graphics/fb0的内容映射到init进程的地址空间来，这样的init进程就可以通过映射得到的虚拟地址来访问帧缓冲区硬件设备的内容了。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;回到函数load_565rle_image中，接下来分别用宏fb_width和fb_height来获得屏幕所使用的分辨率，即屏幕的宽度和高度。宏fb_width和fb_height的定义如下：</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#define fb_width(fb) ((fb)-&gt;vi.xres)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">#define fb_height(fb) ((fb)-&gt;vi.yres)</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;屏幕的所使用的分辨率使用结构体fb_var_sreeninfo的成员变量xres和yres来描述，其中成员xres来描述屏幕的宽度，而成员变量yres用来描述屏幕的高度。得到了屏幕的分辨率之后，就可以知道最多可以向帧缓冲区硬件设备写入字节数的大小了，这个大小等于屏幕的宽度乘以高度，保存在变量max中。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;现在我们分别得到了文件initlogo.rle和帧缓冲区硬件设备在init进程中的虚拟访问地址以及大小，这样我们就可以将文件initlogo.rle的内容写入到帧缓冲区硬件设备中去，以便于可以将第二个开机画面显示出来，这样通过函数load_565rle_image中的while循环来实现的。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;文件initlogo.rle保存的第二个开机画面的图像格式是565rle的。rle的全称是run-length encoding，翻译为游程序编码或者行程长度编码，它可以使用4个字节来描述一个连续的具有相同颜色的序列。在rle565格式，前2个字节中用来描述序列的个数，而后面2个字节用来描述一个具体的颜色，其中，颜色RGB值分别占5位，6位，5位。理解565rle图像格式之后，我们就可以理解函数load_565rle_image中的while循环的实现逻辑了。在每一次循环中，都会依次从文件initlogo.rle中读取4个字节，其中前两个字节保存在变量n中，而后面2个字节的内容用来写入到帧缓冲区硬件设备中。由于2个字节刚好就可以使用一个无符号短整数来描述，因此，函数load_565rle_image通过调用函数android_memset16来将从文件initlogo.rle中读取出来的颜色值写入到帧缓冲区硬件设备中去，</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;函数android_memset16的实现如下：</div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">void android_memset16(void *_ptr, unsigned short val, unsigned count)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;unsigned short *ptr = _ptr;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;count &gt;&gt;= 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;while(count --)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *ptr++ = val;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;参数ptr指向被写入的地址，在我们这个场景中，这个地址即为帧缓冲区硬件设备映射到init进程中的虚拟地址值。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;参数val用来描述被写入的值，在我们这个场景中，这个值即为文件从initlogo.rle中读取出来的颜色值。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;参数count用来描述被写入的地址长度，它是以字节为单位的。由于在将参数val的值写入到参数ptr所描述的地址中去时，是以无符号短整数为单位的，即是以2个字节为单位，因此，函数android_memset16在将参数val写入到地址ptr中去之前，首先会将参数count的值除以2。相应的，在函数load_565rle_image中，需要将具有相同颜色的值序列的个数乘以2之后，再调用函数android_memset16.</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;回到函数load_565rle_image中，将文件/initlogo.rle的内容写入到帧缓冲区硬件设备去之后，第二个开机画面就显示出来了，接下来函数load_565rle_image会调用函数munmap来注销文件/initlogo.rle在init进程中映射，并且调用函数close来关闭文件/initlogo.rle。关闭了文件/initlogo.rle之后，还会调用函数unlink来删除目标设备上的/initlogo.rle文件。注意，这只是删除了目标设备上的/initlogo.rle文件，而不是删除ramdisk映像中的initlogo.rle文件安装到目标设备上的根目录来，这样就可以再每次开机的时候都能将它显示出来。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;除了需要注销文件/initlogo.rle在init进程中的映射和关闭文件/initlogo.rle之外，还需要注销文件/dev/graphices/fb0在init进程中的映射以及关闭文件/dev/graphics/fb0,这是通过调用fb_close函数来实现的，如下所示：</div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static void fb_close(struct FB *fb)</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;munmap(fb-bits, fb_size(fb));</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;close(fb-&gt;fd);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div><span style="font-size: 16px;">&nbsp; &nbsp; &nbsp;在调用fb_close函数之前，函数load_565rle_image还会调用另外一个函数fb_update来更新屏幕上的第二个开机画面，它的实现如下所示：</span></div><div><br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">static void fb_update()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fb-&gt;vi.yoffset = 1;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;ioctl(fb-&gt;fd, FBIOPUT_VSCREENINFO, &amp;fb-&gt;vi);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;fb-&gt;vi.yoffset = 0;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;ioctl(fb-&gt;fd, FBIOPUT_VSCREENINFO, &amp;fb-&gt;vi);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;在结构体fb_var_screeninfo中，除了使用成员变量xres和yres来描述屏幕所使用的分辨率之外，还是成员变量xres_virtual和yres_virtual来描述屏幕所使用的虚拟分辨率。成员变量xres和yres来描述屏幕的分辨率称为可视分辨率。</div><div><br/></div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可视分辨率和虚拟分辨率有什么关系呢？可视分辨率是屏幕上实际上使用的分辨率，即用户所看到的分辨率，而虚拟分辨率是在系统内部使用的，它是不可见的，并且可以大于可视分辨率。例如，假如，可视分辨率是800x600，那么虚拟分辨率可以设置为1600x600。 由于屏幕最多只可以显示800x600个像素，因此，在系统内部，就需要决定从1600x600中取出800x600个像素来显示，这是通过结构体fb_var_screeninfo的成员变量xoffset和yoffset的值来描述的，成员变量xoffset和yoffset的默认值等于0，即默认值等于0，即默认从虚拟分辨率的左上角取出与分辨率大小相等的像素出来显示的，否则的话，就会根据成员变量xoffset和yoffset的值来从虚拟分辨率的中间位置取出与可视分辨率大小相等的像素出来显示的。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp;帧缓冲区的大小是由虚拟分辨率决定的，因此，我们就可以再帧缓冲中写入比屏幕大小还要多的像素值，多出来的这个部分像素值就可以用作双缓冲。我们仍然假设可视分辨率和虚拟分辨率分别是800x600和1600x600，那么我们就可以先将前一个图像的内容写入到帧缓冲区的前面800x600个像素中去，接着再将后一个图像的内容写入到帧缓冲区的后面800x600个像素中。通过分别将用来描述帧缓冲区硬件设备的fb_var_screeninfo的结构体成员变量yoffset的值设置为0和800，这样的就一个平滑地显示两个图像。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;理解了帧缓冲区硬件设备的可视分辨率和虚拟分辨性之后，函数fb_update的实现逻辑就可以很好地理解了。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;至此，第二个开机画面的显示过程就分析完成了。</div><div><br/></div><div>3.第三个开机画面的显示过程</div><div><br/></div><div>&nbsp; &nbsp; 第三个开机画面是由应用程序bootanimation来负责显示的。应用程序bootanimation在启动脚本init.rc中被配置成了一个服务，如下所示：</div><div>&nbsp; &nbsp;</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">Service bootanim /system/bin/bootanimation</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user graphics</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group graphics</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disabled</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oneshot</span></div></div><div><br/></div><div>&nbsp; &nbsp; 应用程序bootanimation的用户和用户组名称分别被设置为graphics.注意，用来启动应用程序bootanimation的服务是disable的，即init进程在启动的时候，不会主动将应用程序bootanimation启动起来。当SurfaceFlinger服务启动的时候，它会通过修改系统属性ctl.start的值来通知init进程启动应用程序bootanimation，以便可以显示第三个开机画面，而当System进程将系统中的关键服务都启动起来之后，ActivityManagerService服务就会通知SurfaceFlinger服务来修改系统属性ctl.stop的值，以便于可以通知init进程停止执行应用程序bootanimation，即停止显示第三个开机画面。接下来我们就分别分析第三个开机画面的显示过程和停止过程。</div><div><br/></div><div>&nbsp; &nbsp; 从前面Android系统进程Zygote启动过程的源码分析可以知道，Zygote进程在启动的过程中，会将System进程启动起来，而从Android应用程序安装过程源码分析可以知道，System进程在启动的过程(step3)中，会调用SurfaceFlinger类的静态成员instantiate来启动SurfaceFlinger服务。System进程在启动SurfaceFlinger服务的过程中，首先会创建一个SurfaceFlinger实例，然后再将这个实例注册到Service Manager中去。在注册的过程中，前面创建的SurfaceFlinger实例被一个sp指针引用。从前面的Android系统的智能指针(轻量级指针、强指针和弱指针)的实现原理分析一文可以知道，当一个对象第一次被智能指针引用的时候，因此在注册SurfaceFlinger服务的过程中，将会调用SurfaceFlinger类的成员函数onFirstRef。在调用的过程，就会创建一个线程来启动第三个开机画面。</div><div><br/></div><div>&nbsp; &nbsp; SurfaceFlinger类实现在文件frameworks/base/services/surfaceflinger/SurfaceFlinger.cpp，它的成员函数onFirstRef的实现如下所示：</div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">void SurfaceFlinger::onFirstRef()</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">{</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;run(“SurfaceFlinger”, PRIORITY_URGENT_DISPLAY);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;//Wait for the main thread to be done with its initialization</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;mReadyToRunBarries.wait();</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; SurfaceFlinger类继承了Thread类，当它的成员函数run被调用的时候，系统就会创建了一个新的线程。这个线程在第一次运行之前，会调用SurfaceFlinger类的成员函数readyToRun来通知SurfaceFlinger，它准备就绪了。当这个线程准备就绪之后，它就会循环执行SurfaceFlinger类的成员函数threadLoop，直到这个成员函数的返回值等于false为止。</div><div><br/></div><div>&nbsp; &nbsp; 注意，SurfaceFlinger类的成员函数onFirstRef是在System进程的主线程中调用的，它需要等待前面创建的线程准备就绪之后，再继续往前执行，这个通过调用SurfaceFlinger类的成员变量mReadytoRunBarrier所描述的一个Barrier对象的成员函数wait来实现的。每一个Barrier对象内问都封装了一个条件变量(Condition Variable),而条件变量是用来同步线程的。</div><div><br/></div><div>&nbsp; &nbsp; 接下来，我们继续分析SurfaceFlinger类的成员函数readToRun的实现，如下所示：</div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">status_t SurfaceFlinger::readyToRun()</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">{</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;LOGI(&nbsp;&nbsp;&nbsp;&quot;SurfaceFlinger&apos;s main thread ready to run. &quot;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Initializing graphics H/W...&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;......</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;mReadyToRunBarrier.open();</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;/*</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;We&apos;re now ready to accept clients...</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;// start boot animation</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;property_set(&quot;ctl.start&quot;, &quot;bootanim&quot;);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">&nbsp;&nbsp;&nbsp;&nbsp;return NO_ERROR;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-size: 12px;">}</span></div></div><div><br/></div><div>&nbsp; &nbsp; 前面创建的线程用作SurfaceFlinger的主线程。这个线程在启动的时候，会对设备主屏幕以及OpenGL库进行初始化。初始化完成之后，接着就会调用SurfaceFlinger类的成员变量mReadyToRunBarrier所描述的一个Barrier对象的成员函数open来唤醒System进程的主线程，以便于它可以继续往前执行。最后，SurfaceFlinger类的成员函数readyToRun的成员函数会调用property_set来将系统属性“ctl.start”的值设置为“bootanim”，表示要将应用程序bootanimation启动起来，以便可以显示第三个开机画面。</div><div><br/></div><div>&nbsp; &nbsp; 前面在介绍第二个开机画面的时候提到，当系统属性发生改变的时，init进程就会接收到一个系统属性变化通知，这个通知最终是由init进程中的函数handle_property_set_fd来处理的。<br/></div><div><br/></div><div>&nbsp; &nbsp; 函数handle_property_set_fd实现在文件system/core/init/property_service.c中，如下所示：<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void handle_property_set_fd()</div><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;prop_msg msg;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;int s;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;int r;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;int res;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;struct ucred cr;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;struct sockaddr_un addr;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;socklen_t addr_size = sizeof(addr);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;socklen_t cr_size = sizeof(cr);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;if ((s = accept(property_set_fd, (struct sockaddr *) &amp;addr, &amp;addr_size)) &lt; 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;/* Check socket options here */</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (getsockopt(s, SOL_SOCKET, SO_PEERCRED, &amp;cr, &amp;cr_size) &lt; 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;close(s);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR(&quot;Unable to recieve socket options\n&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;r = recv(s, &amp;msg, sizeof(msg), 0);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;close(s);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if(r != sizeof(prop_msg)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR(&quot;sys_prop: mis-match msg size recieved: %d expected: %d\n&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r, sizeof(prop_msg));</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;switch(msg.cmd) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;case PROP_MSG_SETPROP:</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg.name[PROP_NAME_MAX-1] = 0;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg.value[PROP_VALUE_MAX-1] = 0;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(memcmp(msg.name,&quot;ctl.&quot;,4) == 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (check_control_perms(msg.value, cr.uid, cr.gid)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handle_control_message((char*) msg.name + 4, (char*) msg.value);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR(&quot;sys_prop: Unable to %s service ctl [%s] uid: %d pid:%d\n&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg.name + 4, msg.value, cr.uid, cr.pid);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (check_perms(msg.name, cr.uid, cr.gid)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;property_set((char*) msg.name, (char*) msg.value);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR(&quot;sys_prop: permission denied uid:%d&nbsp;&nbsp;name:%s\n&quot;,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cr.uid, msg.name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;default:</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>}</div></div><div>&nbsp;&nbsp; &nbsp;<br/></div><div>&nbsp; &nbsp; init进程是通过一个socket来接收系统属性变化事件的。每一个系统属性变化事件的内容都是通过一个pro_msg对象来描述的。在prop_msg键值对，成员变量name用来描述发生变化的系统属性的名称，而成员变量value用来描述变化的系统属性的值。系统属性分为两种类型，一种是普通类型的系统属性，另一种是控制类型的系统属性(属性名称以”ctl.”开头)。控制类型的系统属性在变化时，会触发init进程执行一个命令，而普通类型的系统属性就不具有这个特性。注意，改变系统属性是需要权限，因此，函数handle_property_set_fd在处理一个系统属性变化事件之前，首先会检查修改系统属性的进程是否具有相同的权限，这是通过调用函数check_control_perms或者check_perms来实现的。。<br/></div><div><br/></div><div>&nbsp; &nbsp; 从前面的调用过程可以知道，当前发生变化的系统属性名称为”ctl.start”，它的值被设置为”bootanim”。由于这是一个控制类型的系统属性，因此，在通过了权限检查之后，另外一个函数handle_control_message就会被调用，以便于可以执行一个名称为”bootanim”的命令。<br/></div><div><br/></div><div>&nbsp; &nbsp; 函数handle_control_message实现在system/core/init/init.c中，如下所示：<br/></div><div>&nbsp; &nbsp;<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void handle_control_message(const char *msg, const char *arg)</div><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (!strcmp(msg,&quot;start&quot;)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg_start(arg);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;} else if (!strcmp(msg,&quot;stop&quot;)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg_stop(arg);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR(&quot;unknown control msg &apos;%s&apos;\n&quot;, msg);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; 控制类的系统属性的名称是以“ctl.”开头的，并且是以”start”或者“stop”结尾的，其中，“start”表示要启动某一个服务，而“stop”表示要停止某一个服务，它们是分别通过函数msg_start和msg_stop来实现的。由于当前发生变化的系统属性是以”start”来结尾的话，因此，接下来就会调用函数msg_start来启动一个名称为”bootanim”的服务。<br/></div><div><br/></div><div>&nbsp; &nbsp; 函数msg_start实现在文件system/core/init/init.c中，就如下所示：<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;&nbsp;&nbsp;</div><div>static void msg_start(const char *name)</div><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;struct service *svc;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;char *tmp = NULL;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;char *args = NULL;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (!strchr(name, &apos;:&apos;))</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svc = service_find_by_name(name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = strdup(name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args = strchr(tmp, &apos;:&apos;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*args = &apos;\0&apos;;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args++;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svc = service_find_by_name(tmp);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (svc) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_start(svc, args);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERROR(&quot;no such service &apos;%s&apos;\n&quot;, name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (tmp)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(tmp);</div><div>}</div></div><div>&nbsp;&nbsp; &nbsp;<br/></div><div>&nbsp; &nbsp; 参数name的值等于“bootanim”，它用来描述一个服务名称。这个函数首先调用函数service_find_by_name来找到名称等于“bootanim”的服务的信息，这些信息保存在一个service结构体svc中，接着再调用另外一个函数service_start来将对于的应用程序启动起来。<br/></div><div><br/></div><div>&nbsp; &nbsp; 从前面的内容可以知道，名称等于“bootanim”的服务所对应的应用程序为/system/bin/bootanimation，这个应用入口函数main是实现在frameworks/base/cmds/bootanimation/bootanimation_main.cpp中的，如下所示：</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>int main(int argc, char** argv)</div><div>{</div><div>#if defined(HAVE_PTHREADS)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;setpriority(PRIO_PROCESS, 0, ANDROID_PRIORITY_DISPLAY);</div><div>#endif</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;char value[PROPERTY_VALUE_MAX];</div><div>&nbsp;&nbsp;&nbsp;&nbsp;property_get(&quot;debug.sf.nobootanimation&quot;, value, &quot;0&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;int noBootAnimation = atoi(value);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;LOGI_IF(noBootAnimation,&nbsp;&nbsp;&quot;boot animation disabled&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (!noBootAnimation) {</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;ProcessState&gt; proc(ProcessState::self());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProcessState::self()-&gt;startThreadPool();</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// create the boot animation object</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;BootAnimation&gt; boot = new BootAnimation();</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IPCThreadState::self()-&gt;joinThreadPool();</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;return 0;</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; 这个函数首先检查系统属性”debug.sf.nobootnimaition”的值是否不等于0。如果不等于的话，接下来就会启动Binder线程池，并且创建一个BootAnimation对象。这个BootAnimation对象就是用来显示第三个开机画面的。由于BootAnimation对象在显示第三个开机画面的过程中，需要与SurfaceFlinger服务通信，因此，应用程序BootAnimation就需要启动一个Binder线程池。<br/></div><div><br/></div><div>&nbsp; &nbsp; BootAnimation类间接地继承了RefBase类，并且重写了RefBase类的成员函数onFirstRef,因此，当一个BootAnimation对象第一个被智能指针引用时，这个BootAnimation对象的成员函数onFirstRef就会调用。<br/></div><div>&nbsp; &nbsp;&nbsp;<br/></div><div>&nbsp; &nbsp; BootAnimation类的成员函数onFirstRef实现在文件frameworks/base/cmds/bootanimation/BootAnimation.cpp中，如下所示：<br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>void BootAnimation::onFirstRef() {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;status_t err = mSession-&gt;linkToComposerDeath(this);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;LOGE_IF(err, &quot;linkToComposerDeath failed (%s) &quot;, strerror(-err));</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (err == NO_ERROR) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;run(&quot;BootAnimation&quot;, PRIORITY_DISPLAY);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; mSession是BootAnimation类的一个成员变量，它的类型为SurfaceComposerClient，是用来和SurfaceFlinger执行Binder进程间通信的，它是在BootAnimation类的构造函数中创建的，如下所示：<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>BootAnimation::BootAnimation() : Thread(false)</div><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mSession = new SurfaceComposerClient();</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; SurfaceComposerClient类内部有一个实现了ISurfaceComposerClient接口的Binder代理对象mClient，这个Binder代理对象引用了SurfaceFlinger服务，SurfaceComposerClient类就是通过它来和SurfaceFlinger服务通信的。<br/></div><div><br/></div><div>&nbsp; &nbsp; 回到BootAnimation类的成员函数onFirstRef中，由于BootAnimation类引用了SurfaceFlinger服务，因此，当SurfaceFlinger服务意外死亡时，BootAnimation类就需要得到通知，这是通过调用成员变量mSession的成员函数linkToComposerDeath来注册SurfaceFlinger服务的死亡接收通知来实现的。<br/></div><div><br/></div><div>&nbsp; &nbsp; BootAnimation类继承了Thread类，因此，当BootAnimation类的成员函数onFirstRef调用了父类Thread的成员函数run之后，系统就会创建一个线程，这个线程在第一次运行之前，会调用BootAnimation类的成员函数readyToRun来执行一些初始化的工作，后面再调用BootAnimation类的成员函数htreadLoop类显示第三个开机画面。<br/></div><div><br/></div><div>&nbsp; &nbsp; BootAnimation类的成员函数readyToRun的实现如下所示：<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>status_t BootAnimation::readyToRun() {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mAssets.addDefaultAssets();</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;DisplayInfo dinfo;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;status_t status = session()-&gt;getDisplayInfo(0, &amp;dinfo);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (status)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;// create the native surface</div><div>&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;SurfaceControl&gt; control = session()-&gt;createSurface(</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getpid(), 0, dinfo.w, dinfo.h, PIXEL_FORMAT_RGB_565);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;session()-&gt;openTransaction();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;control-&gt;setLayer(0x40000000);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;session()-&gt;closeTransaction();</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;sp&lt;Surface&gt; s = control-&gt;getSurface();</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;// initialize opengl and egl</div><div>&nbsp;&nbsp;&nbsp;&nbsp;const EGLint attribs[] = {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EGL_DEPTH_SIZE, 0,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EGL_NONE</div><div>&nbsp;&nbsp;&nbsp;&nbsp;};</div><div>&nbsp;&nbsp;&nbsp;&nbsp;EGLint w, h, dummy;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;EGLint numConfigs;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;EGLConfig config;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;EGLSurface surface;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;EGLContext context;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;EGLDisplay display = eglGetDisplay(EGL_DEFAULT_DISPLAY);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglInitialize(display, 0, 0);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;EGLUtils::selectConfigForNativeWindow(display, attribs, s.get(), &amp;config);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;surface = eglCreateWindowSurface(display, config, s.get(), NULL);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;context = eglCreateContext(display, config, NULL, NULL);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglQuerySurface(display, surface, EGL_WIDTH, &amp;w);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglQuerySurface(display, surface, EGL_HEIGHT, &amp;h);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (eglMakeCurrent(display, surface, surface, context) == EGL_FALSE)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NO_INIT;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;mDisplay = display;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mContext = context;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mSurface = surface;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mWidth = w;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mHeight = h;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mFlingerSurfaceControl = control;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mFlingerSurface = s;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;mAndroidAnimation = true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if ((access(USER_BOOTANIMATION_FILE, R_OK) == 0) &amp;&amp;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(mZip.open(USER_BOOTANIMATION_FILE) == NO_ERROR) ||</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(access(SYSTEM_BOOTANIMATION_FILE, R_OK) == 0) &amp;&amp;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(mZip.open(SYSTEM_BOOTANIMATION_FILE) == NO_ERROR))</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mAndroidAnimation = false;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;return NO_ERROR;</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; BootAnimation类的成员函数session用来返回BootAnimation类的成员变化mSession所描述的一个SurfaceComposerClient对象。通过调用SurfaceComposerClient对象mSession的成员函数createSurface可以获得一个SurfaceControl对象control。<br/></div><div><br/></div><div>&nbsp; &nbsp; SurfaceComposerClient类的成员函数createSurface首先调用内部的Binder代理对象mClient来请求SurfaceFlinger返回一个类型为SurfaceLayer的Binder代理对象，接着再使用这个Binder代理对象来创建一个SurfaceControl对象。创建处理的SurfaceControl对象的成员变量mSurface就指向了从SurfaceFlinger返回的类型为SurfaceLayer的Binder代理对象。有了这个Binder代理对象之后，SurfaceControl对象就可以和SurfaceFlinger服务通信了。<br/></div><div><br/></div><div>&nbsp; &nbsp; 调用SurfaceControl对象control的成员函数getSurface会返回一个Surface对象s。这个Surface对象s内部也有一个类型为SurfaceLayer的Binder代理对象mSurface，这个Binder代理对象与前面所创建的SurfaceControl对象control的内部的Binder代理对象mSurface引用的是同一个SurfaceLayer对象。这样，Surface对象s也可以通过其内部的Binder代理对象mSurface来和SurfaceFlinger服务通信。<br/></div><div><br/></div><div>&nbsp; &nbsp; Surface类继承了ANativeWindow类。ANativeWindow类是连接OpenGL和Android窗口系统的桥梁，即OpenGL需要通过ANativeWindow类来间接地操作Android窗口系统。这中桥梁关系是通过EGL库来建立的，所有以egl为前缀的函数名均为EGL库提供的接口。<br/></div><div><br/></div><div>&nbsp; &nbsp; 为了能够在OpenGL和Android窗口系统之间的建立一个桥梁，我们需要一个EGLDisplay对象display，一个EGLConfig对象config，一个EGLSurface对象surface，以及一个EGLContext对象context，其中，EGLDisplay对象Surface用来描述一个EGL绘图表面，EGLContext对象context用来描述一个EGL绘图上下文（状态），它们是分别通过调用egl库函数eglGetDisplay、EGLUtils::selectConfigForNativeWindow、eglCreateWindowSurface和eglCreateContext来获得的。注意，EGLConfig对象config、EGLSurface对象surface和EGLContext对象context都是用来描述EGLDisplay对象display的。有了这些对象之后，就可以调用函数eglMakeCurrent来设置当前EGL库所使用的绘图表面以及绘图上下文。<br/></div><div><br/></div><div>&nbsp; &nbsp; 还有另外一个地方需要注意的是，每一个EGLSurface对象surface有一个关联的ANativeWindow对象。这个ANativeWindow对象是通过调用函数eglCreateWindowSurface的第三个参数来指定的。在我们这个场景中，这个ANativeWindow对象正好对应于前面所创建的Surface对象s。每当OpenGL需要绘图的时候，它就会找到前面所设置的绘图表面，即EGLSurface对象surface。有了EGLSurface对象surface之后，就可以找到与它关联的ANativeWindow对象，即Surface对象s。有了Surface对象s之后，就可以通过其内部的Binder代理对象mSurface来请求SurfaceFlinger服务返回帧缓存区硬件设置的一个图形返回接口。这样，OpenGL最终就可以将要回绘制的图形渲染到帧缓冲区硬件设备中去，即显示在实际的屏幕上。屏幕的大小，即宽度和高度，可以通过函数eglQuerySurface来获得。<br/></div><div><br/></div><div>&nbsp; &nbsp; BootAnimation类型的成员变量mAndroidAnimation是一个布尔变量。当它的值等于true的时候，那么就说明需要显示的第三个开机画面是Android系统默认的开机动画，否则的话，第三个开机画面就是由用户自定义的开机动画。<br/></div><div><br/></div><div>&nbsp; &nbsp; 自定义的开机画面是由文件USER_BOOTANIMAION_FILE或者文件SYSTEM_BOOTANIMATION_FILE来描述的。只要其中的一个文件存在，那么第三个开机画面就会使用用户自定义的开机动画。<br/></div><div>USER_BOOTANIMATION_FILE和SYSTEM_BOOTANIMATION_FILE均是一个宏，它们的定义如下所示：</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>#define USER_BOOTANIMATION_FILE &quot;/data/local/bootanimation.zip&quot;</div><div>#define SYSTEM_BOOTANIMATION_FILE &quot;/system/media/bootanimation.zip&quot;</div></div><div><br/></div><div>&nbsp; &nbsp; 第一步执行完成之后，用来显示第三个开机画面的线程的初始化工作就执行完成了，接下来，就会执行这个线程的主体函数，即BootAnimation类的成员函数threadLoop。<br/></div><div><br/></div><div>&nbsp; &nbsp; BootAnimation类的成员函数threadLoop的实现如下所示:<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>bool BootAnimation::threadLoop()</div><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;bool r;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (mAndroidAnimation) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = android();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = movie();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglMakeCurrent(mDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglDestroyContext(mDisplay, mContext);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglDestroySurface(mDisplay, mSurface);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mFlingerSurface.clear();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mFlingerSurfaceControl.clear();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglTerminate(mDisplay);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;IPCThreadState::self()-&gt;stopProcess();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;return r;</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; 如果BootAnimation类的成员变量mAndroidAnimation的值等于true，那么接下来就会调用BootAnimation类的成员函数android来显示系统默认的开机动画，否则的话，就会调用BootAnimation类的成员函数movie来显示用户自定义的开机动画。显示完成之后，就会销毁前面所创建的EGLContext对象mContext、EGLSurface对象mSurface,以及EGLDisplay对象mDisplay等。<br/></div><div>&nbsp;&nbsp; &nbsp;<br/></div><div>&nbsp; &nbsp; 接下来，我们就分别分析BootAnimation类的成员函数android和movie的实现。<br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>bool BootAnimation::android()</div><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;initTexture(&amp;mAndroid[0], mAssets, &quot;images/android-logo-mask.png&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;initTexture(&amp;mAndroid[1], mAssets, &quot;images/android-logo-shine.png&quot;);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;// clear screen</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glShadeModel(GL_FLAT);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glDisable(GL_DITHER);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glDisable(GL_SCISSOR_TEST);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glClear(GL_COLOR_BUFFER_BIT);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglSwapBuffers(mDisplay, mSurface);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;glEnable(GL_TEXTURE_2D);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;const GLint xc = (mWidth&nbsp;&nbsp;- mAndroid[0].w) / 2;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;const GLint yc = (mHeight - mAndroid[0].h) / 2;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;const Rect updateRect(xc, yc, xc + mAndroid[0].w, yc + mAndroid[0].h);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;// draw and update only what we need</div><div>&nbsp;&nbsp;&nbsp;&nbsp;mFlingerSurface-&gt;setSwapRectangle(updateRect);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;glScissor(updateRect.left, mHeight - updateRect.bottom, updateRect.width(),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateRect.height());</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;// Blend state</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;const nsecs_t startTime = systemTime();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;do {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nsecs_t now = systemTime();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double time = now - startTime;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float t = 4.0f * float(time / us2ns(16667)) / mAndroid[1].w;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GLint offset = (1 - (t - floorf(t))) * mAndroid[1].w;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GLint x = xc - offset;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glDisable(GL_SCISSOR_TEST);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glClear(GL_COLOR_BUFFER_BIT);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glEnable(GL_SCISSOR_TEST);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glDisable(GL_BLEND);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBindTexture(GL_TEXTURE_2D, mAndroid[1].name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glDrawTexiOES(x,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yc, 0, mAndroid[1].w, mAndroid[1].h);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glDrawTexiOES(x + mAndroid[1].w, yc, 0, mAndroid[1].w, mAndroid[1].h);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glEnable(GL_BLEND);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBindTexture(GL_TEXTURE_2D, mAndroid[0].name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glDrawTexiOES(xc, yc, 0, mAndroid[0].w, mAndroid[0].h);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EGLBoolean res = eglSwapBuffers(mDisplay, mSurface);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (res == EGL_FALSE) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 12fps: don&apos;t animate too fast to preserve CPU</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const nsecs_t sleepTime = 83333 - ns2us(systemTime() - now);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sleepTime &gt; 0)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usleep(sleepTime);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;} while (!exitPending());</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;glDeleteTextures(1, &amp;mAndroid[0].name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glDeleteTextures(1, &amp;mAndroid[1].name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;return false;</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; Android系统默认的开机动画使用两张图片android-logo-mask.png和android-logo-shine.png。这两张图片保存在frameworks/base/core/res/assets/images/目录中，它们最终会被编译在framework-res模块(frameworks/base/core/res)中，即编译在framework-res.apk中。编译在framework-res模块中的资源文件可以通过AssetManager来访问的。<br/></div><div><br/></div><div>&nbsp; &nbsp; BootAnimation类的成员函数android首先调用另外一个成员函数initTexture来将根据图片android-logo-mask.png和android-logo-shine.png的内容来分别创建两个纹理对象，这两个纹理对象就分别保存在BootAnimation类的成员变量mAndroid所描述的一个数组中。通过混合渲染两个纹理对象，我们就可以得到一个开机动画，这是调用中间的while循环语句来实现的。<br/></div><div><br/></div><div>&nbsp; &nbsp; 图片android-logo-mask.png用作动画前景，它是一个镂空的“ANDROID”图像。图片android-logo-shine.png用来作动画的背景，它的中间包含一个高亮的呈45度的条纹。在每一次循环中，图片android-logo-shine.png被划分成左右两部分内容来显示。左右两个部分的图像宽度随着时间的推移而此消彼长，这样就可以使得图片android-logo-shine.png中间高亮的条纹好像在移动一样。另一方面，在每一次循环中，图片android-logo-shine.png都作为一个整体来渲染，而它的位置是恒定不变的。由于它是一个镂空的“ANDROID”图像，因此，我们就可以通过它的镂空来看到它背后的图片android-logo-shine.png的条纹一闪一闪地划过。<br/></div><div><br/></div><div>&nbsp;这个while循环语句会一直被执行，直到应用程序/system/bin/bootanimation被结束为止，后面我们在分析。</div><div><br/></div><div>BootAnimation类的成员函数movie的实现比较长，我们分段来阅读。</div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>bool BootAnimation::movie()</div><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;ZipFileRO&amp; zip(mZip);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;size_t numEntries = zip.getNumEntries();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;ZipEntryRO desc = zip.findEntryByName(&quot;desc.txt&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;FileMap* descMap = zip.createEntryFileMap(desc);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;LOGE_IF(!descMap, &quot;descMap is null&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;if (!descMap) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;String8 desString((char const*)descMap-&gt;getDataPtr(),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descMap-&gt;getDataLength());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;char const* s = desString.string();</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;Animation animation;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;// Parse the description file</div><div>&nbsp;&nbsp;&nbsp;&nbsp;for (;;) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char* endl = strstr(s, &quot;\n&quot;);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!endl) break;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String8 line(s, endl - s);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char* l = line.string();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int fps, width, height, count, pause;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char path[256];</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sscanf(l, &quot;%d %d %d&quot;, &amp;width, &amp;height, &amp;fps) == 3) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//LOGD(&quot;&gt; w=%d, h=%d, fps=%d&quot;, fps, width, height);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animation.width = width;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animation.height = height;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animation.fps = fps;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sscanf(l, &quot;p %d %d %s&quot;, &amp;count, &amp;pause, path) == 3) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//LOGD(&quot;&gt; count=%d, pause=%d, path=%s&quot;, count, pause, path);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Animation::Part part;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part.count = count;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part.pause = pause;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part.path = path;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animation.parts.add(part);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = ++endl;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div>&nbsp; &nbsp; 从前面的BootAnimation类的成员函数readyToRun的实现可以直到，如果目标设备上存在压缩文件/data/local/bootanimation.zip，那么BootAnimation类的成员变量mZip就会指向它，否则的话，就会指向目标设备上的压缩文件/system/media/bootanimation.zip。无论BootAnimation类的成员变量mZip指向的是哪个压缩文件，这个压缩文件都必须包含一个名称为“desc.txt”的文件，用来描述用户自定义的开机动画是如何显示的。<br/></div><div><br/></div><div>&nbsp; &nbsp; 文件desc.txt的内容格式如下面例子所示：<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>600&nbsp;&nbsp;&nbsp;&nbsp;480&nbsp;&nbsp;&nbsp;&nbsp;24</div><div>p&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;part1</div><div>p&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;part2</div></div><div><br/></div><div>&nbsp; &nbsp; 第一行的三个数字分别表示开机动画在屏幕中显示的宽度，高度以及帧速(fps)。剩余的每一行都用来描述一个动画片段，这些行必须要以字符”p”来开头，后面紧跟着两个数字以及一个文件目录路径名称。第一个数字表示第一个片段循环显示次数，如果它的值等于0，那么久表示无限循环地显示该动画片段。第二个数字表示每一个片段在两个循环显示之间的时间间隔。这个时间间隔是以一个帧的事件为单位的。文件目录下面保存的是一系列的png文件，这些png文件会被依次显示在屏幕中。</div><div><br/></div><div>&nbsp; &nbsp; 以上面这个desct.txt文件的内容为例，它描述了一个大小为600x480的开机动画，动画的显示速度为24帧每秒。这个开机动画包含有两个片段part1和part2。片段part1只显示一次，它对应的png图片保存在目录part1中。片段part2无限循环地显示，其中每两次循环显示的时间间隔为10x(1/24)秒，它对应的png图片保存在目录part2中。<br/></div><div><br/></div><div>&nbsp; &nbsp; 上面for循环语句分析完成desc.txt文件的内容后，就得到了开机动画的显示大小、速度以及片段信息。这些信息都保存在Animation对象animation中，其中，每一个动画片段都使用了一个Animation::Part来描述，并且保存在Animation对象animation的成员变量parts所描述的一个片段列表中。<br/></div><div><br/></div><div>&nbsp; &nbsp; 接下来，BootAnimation类的成员函数movie再断续将每一个片段所对应的png图片读取出来，如下所示：<br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;&nbsp;&nbsp;&nbsp;// read all the data structures</div><div>&nbsp;&nbsp;&nbsp;&nbsp;const size_t pcount = animation.parts.size();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;for (size_t i=0 ; i&lt;numEntries ; i++) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char name[256];</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ZipEntryRO entry = zip.findEntryByIndex(i);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (zip.getEntryFileName(entry, name, 256) == 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const String8 entryName(name);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const String8 path(entryName.getPathDir());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const String8 leaf(entryName.getPathLeaf());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (leaf.size() &gt; 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0 ; j&lt;pcount ; j++) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (path == animation.parts[j].path) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int method;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// supports only stored png files</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (zip.getEntryInfo(entry, &amp;method, 0, 0, 0, 0, 0)) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (method == ZipFileRO::kCompressStored) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileMap* map = zip.createEntryFileMap(entry);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (map) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Animation::Frame frame;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame.name = leaf;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame.map = map;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Animation::Part&amp; part(animation.parts.editItemAt(j));</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part.frames.add(frame);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div><div>&nbsp; &nbsp; 每一个png图片都表示一个动画帧，使用一个Animation::Frame对象来描述，并且保存在对应的Animation::Part对象的成员变量frames所描述的一个帧列表中。<br/></div><div>&nbsp; &nbsp; 获得了开机动画的所有信息之后，接下来BootAnimation类的成员变量movie就准备开始显示开机动画了，如下所示：<br/></div><div><br/></div><div>&nbsp;<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;&nbsp;&nbsp;// clear screen</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glShadeModel(GL_FLAT);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glDisable(GL_DITHER);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glDisable(GL_SCISSOR_TEST);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glDisable(GL_BLEND);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glClear(GL_COLOR_BUFFER_BIT);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;eglSwapBuffers(mDisplay, mSurface);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;glBindTexture(GL_TEXTURE_2D, 0);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glEnable(GL_TEXTURE_2D);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;const int xc = (mWidth - animation.width) / 2;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;const int yc = ((mHeight - animation.height) / 2);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;nsecs_t lastFrame = systemTime();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;nsecs_t frameDuration = s2ns(1) / animation.fps;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;Region clearReg(Rect(mWidth, mHeight));</div><div>&nbsp;&nbsp;&nbsp;&nbsp;clearReg.subtractSelf(Rect(xc, yc, xc+animation.width, yc+animation.height));</div></div><div><br/></div><div>前面的一系列gl函数首先用来清理屏幕，接下来的一系列gl函数用来设置OpenGL的纹理显示方式。</div><div><br/></div><div>&nbsp; &nbsp; 变量xc和yc的值用来描述开机动画的显示位置，即需要在屏幕中间显示开机动画，另外一个变量frameDuration的值用来描述每一帧的显示时间，它是以纳秒为单位的。<br/></div><div><br/></div><div>&nbsp; &nbsp; Region对象clearReg用来描述屏幕中处理开机画面之外的其他区域，它是用整个屏幕区域减去开机动画所占据的区域来得到的。<br/></div><div><br/></div><div>&nbsp; &nbsp; 准备好开机动画的参数之后，最后就可以执行显示开机动画的操作了，如下所示：</div><div>&nbsp;&nbsp;<br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>&nbsp;&nbsp;for (int i=0 ; i&lt;pcount &amp;&amp; !exitPending() ; i++) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Animation::Part&amp; part(animation.parts[i]);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const size_t fcount = part.frames.size();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBindTexture(GL_TEXTURE_2D, 0);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int r=0 ; !part.count || r&lt;part.count ; r++) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0 ; j&lt;fcount &amp;&amp; !exitPending(); j++) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Animation::Frame&amp; frame(part.frames[j]);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (r &gt; 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBindTexture(GL_TEXTURE_2D, frame.tid);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (part.count != 1) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glGenTextures(1, &amp;frame.tid);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBindTexture(GL_TEXTURE_2D, frame.tid);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initTexture(</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame.map-&gt;getDataPtr(),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;frame.map-&gt;getDataLength());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!clearReg.isEmpty()) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Region::const_iterator head(clearReg.begin());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Region::const_iterator tail(clearReg.end());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glEnable(GL_SCISSOR_TEST);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (head != tail) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Rect&amp; r(*head++);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glScissor(r.left, mHeight - r.bottom,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.width(), r.height());</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glClear(GL_COLOR_BUFFER_BIT);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glDisable(GL_SCISSOR_TEST);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glDrawTexiOES(xc, yc, 0, animation.width, animation.height);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eglSwapBuffers(mDisplay, mSurface);</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nsecs_t now = systemTime();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nsecs_t delay = frameDuration - (now - lastFrame);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastFrame = now;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long wait = ns2us(frameDuration);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (wait &gt; 0)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usleep(wait);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usleep(part.pause * ns2us(frameDuration));</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// free the textures for this part</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (part.count != 1) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j=0 ; j&lt;fcount ; j++) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Animation::Frame&amp; frame(part.frames[j]);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glDeleteTextures(1, &amp;frame.tid);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;return false;</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; 第一层for循环用来显示每一个动画片段，第二层的for循环用来循环显示每一个动画片段，第三层的for循环用来显示每一个动画片段所对应的png图片。这些png图片以纹理的方式来显示在屏幕中。<br/></div><div><br/></div><div>&nbsp; &nbsp; 注意，如果一个动画片段的循环显示次数不等于1，那么就说明这个动画片段中png片段需要重复地显示在屏幕中。由于每一个png图片都需要转换为一个纹理对象之后才能显示在屏幕中，因此，为了避免重复的为同一个png图片创建纹理对象，并且将这个纹理对象的名称保存在对应的Animation::Frame对象的成员变量tid中，这样，下次再显示相同的图片时，就可以使用前面已经创建好了的纹理对象，即调用函数glBindTexture来指定当前要操作的纹理对象。<br/></div><div><br/></div><div>&nbsp; &nbsp; 如果Region对象clearReg所包含的区域不为空，那么在调用函数glDrawTexiOES和eglSwapBuffers来显示每一个png图片之前，首先要将它所包含的区域裁减掉，避免开机动画可以显示在指定的位置以及大小中。<br/></div><div><br/></div><div>&nbsp; &nbsp; 每当显示完一个png图片之后，都要将变量frameDuration的值从纳秒转换为毫秒。如果转换后的值大与0，那么就需要调用函数usleep函数来让线程睡眠以下，以保证每一个png图片，即每一帧动画都按照预先指定好的速度来显示。注意，函数usleep指定的睡眠时间只能精确到毫秒，因此，如果预先预定的帧显示时间小于1毫秒，那么BootAnimation类的成员函数movie是无法精确地控制每一帧的显示时间的。<br/></div><div><br/></div><div>&nbsp; &nbsp; 还有另外一个地方需要注意的是，每当循环显示完成一个片段是，需要调用usleep函数来使得线程睡眠part.pause.ns2us(frameDuration)毫秒，以便于可以案子预先设定的节奏来显示开机动画。<br/></div><div><br/></div><div>&nbsp; &nbsp; 最后一个if语句判断一个动画片段是否是循环显示的，即循环次数不等于1。如果是的话，那么就说明前面它所对应的每一个png图片都创建过一个纹理对象。现在既然这个片段的显示过程都已经结束了，因此就需要释放前面为它所创建的纹理对象。<br/></div><div><br/></div><div>&nbsp; &nbsp; 至此，第三个开机画面的显示过程就分析完成了。<br/></div><div><br/></div><div>&nbsp; &nbsp; 接下来，我们再继续分析第三个开机画面是如何停止显示的。<br/></div><div><br/></div><div>&nbsp; &nbsp; 从前面Android系统默认Home应用程序(Laucher)的启动过程源代码分析一文可以知道，当System进程将系统的关键服务启动起来之后，就会将应用程序的启动器(Launcher)启动起来。从Android应用程序启动过程源代码分析一文又可以直到，Android应用程序的启动过程实际上就是它的根Activity组件的启动过程。对于应用程序Launcher来说它的根Activity组件即为Launcher组件。<br/></div><div><br/></div><div>&nbsp; &nbsp; 一个Activity组件在启动之后，就会被记录起来，等到它所运行在的主线程空闲的时候，这个主线程就会向ActivityManagerService发送一个Activity组件空闲的通知。由于应用程序Launcher是系统中第一个被启动的应用程序，即它的根Activity组件是系统中第一个被启动的Activity组件，因此，当ActivityManagerSerive接收到它的空闲通知的时候，就可以直到系统是刚刚启动起来的。在这种情况下，ActivityManagerService就会停止显示开机动画，以便可以在屏幕中显示应用程序Launcher的界面。<br/></div><div><br/></div><div>&nbsp; &nbsp; 从前面的Android应用程序消息处理机制(Looper, Handler)分析一文可以直到，如果一个线程想要在空闲的时候处理一些事务，那么就必须要向这个线程的消息队列注册一个空闲的消息处理器。自定义的空闲消息处理器必须要从MessageQueue.IdleHandler类继承下来，并且重写成员函数queueIdle。当一个线程空闲的时候，即消息队列中没有新的消息需要处理的时候，那些注册了的空闲消息处理器的成员函数queueIdle就会被调用。<br/></div><div><br/></div><div>&nbsp; &nbsp; 应用程序的主线程是通过ActivityThread类来描述的，它实现在文件frameworks/base/core/java/android/app/ActivityThread.java中。每当有一个新的Activity组件启动起来的时候，ActivityThread类都会向它所描述的应用程序主线程的消息队列注册一个类型为Idler的空闲消息处理器。这样一个应用程序的主线程就可以在空闲的时候，向ActivityManagerService发送一个Activity组件空闲的通知，相当于是通知ActivityManagerService，一个新的Activity组件已经准备就绪了。<br/></div><div><br/></div><div>&nbsp; &nbsp; Idler类定义在frameworks/base/core/java/android/app/ActivityThread.java中，它的成员函数queueIdle的实现如下所示：<br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>public final class ActivityThread {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;......</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;private final class Idler implements MessageQueue.IdleHandler {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final boolean queueIdle() {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActivityClientRecord a = mNewActivities;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a != null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mNewActivities = null;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IActivityManager am = ActivityManagerNative.getDefault();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActivityClientRecord prev;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;......</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a.activity != null &amp;&amp; !a.activity.mFinished) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;am.activityIdle(a.token, a.createdConfig);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.createdConfig = null;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (RemoteException ex) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev = a;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a = a.nextIdle;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev.nextIdle = null;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (a != null);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureJitEnabled();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;......</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; ActivityThread类有一个类型为ActivityClientRecord的成员变量mNewActivities，用来描述所有在当前应用程序主线程中新启动起来的Activity组件。这些新启动的Activity组件通过ActivityClientRecord类的成员变量nextIdle连接在一起。一旦当前应用程序主线程向ActivityManagerService发送了这些新启动的Activity组件的空闲通知之后，这些新启动起来的Activity组件就不会再被保存在ActivityThread类的成员变量mNewActivities中了，即每一个新启动的Activity组件只有一次机会向ActivityManagerService发送一个空闲通知。<br/></div><div><br/></div><div>&nbsp; &nbsp; 向ActivityManagerService发送一个Activity组件空闲通知是通过调用ActivityManagerService代理对象的成员函数activityIdle来实现的，而ActivityManagerService代理对象可以通过调用ActivityManagerNative类的静态成员函数getDefault来获得。<br/></div><div><br/></div><div>&nbsp; &nbsp; ActivityManagerSerive代理对象的类型为ActivityManagerProxy，它的成员函数activityIdle实现在文件frameworks/base/core/java/android/app/ActivityManagerNative.java中，如下所示：<br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>class ActivityManagerProxy implements IActivityManager</div><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;......</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;public void activityIdle(IBinder token, Configuration config) throws RemoteException</div><div>&nbsp;&nbsp;&nbsp;&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parcel data = Parcel.obtain();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parcel reply = Parcel.obtain();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.writeInterfaceToken(IActivityManager.descriptor);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.writeStrongBinder(token);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (config != null) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.writeInt(1);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.writeToParcel(data, 0);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.writeInt(0);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mRemote.transact(ACTIVITY_IDLE_TRANSACTION, data, reply, IBinder.FLAG_ONEWAY);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reply.readException();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.recycle();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reply.recycle();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;......</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; ActivityManagerProxy类的成员函数activityIdle实际上是向ActivityManagerService发送一个类型为ACTIVITY_IDLE_TRANSACTION的Binder进程间通信请求，其中，参数token用来描述与这个进程间通信请求的所关联的一个Activity组件，在我们这个场景中，这个Activity组件即为应用程序Launcher的根Activity组件Launcher。<br/></div><div><br/></div><div>&nbsp; &nbsp; 类型为ACTIVITY_IDLE_TRANSACTION的Binder进程间通信请求是由ActivityManagerService类的成员函数activityIdle来处理的，如下所示：<br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>public final class ActivityManagerService extends ActivityManagerNative</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;......</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;public final void activityIdle(IBinder token, Configuration config) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final long origId = Binder.clearCallingIdentity();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mMainStack.activityIdleInternal(token, false, config);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Binder.restoreCallingIdentity(origId);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;......</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; ActivityManagerService类有一个类型为ActivityStack的成员变量mMainStack，它用来描述系统的Activity组件堆栈，它的成员函数activityIdleInternal的实现如下所示：<br/></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;-en-codeblock:true;"><div>public class ActivityStack {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;......</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;final void activityIdleInternal(IBinder token, boolean fromTimeout,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Configuration config) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;......</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean enableScreen = false;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized (mService) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;......</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get the activity record.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int index = indexOfTokenLocked(token);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index &gt;= 0) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActivityRecord r = (ActivityRecord)mHistory.get(index);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;......</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mMainStack) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!mService.mBooted &amp;&amp; !fromTimeout) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mService.mBooted = true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enableScreen = true;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;......</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;......</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (enableScreen) {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mService.enableScreenAfterBoot();</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;......</div><div>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div></div><div><br/></div><div>&nbsp; &nbsp; 参数token用来描述刚刚启动起来的Launcher组件，通过它来调用函数indexOfTokenLocked就可以得到Launcher组件在系统Activity组件堆栈中的位置index。得到了Launcher组件在系统Activity组件堆栈中的位置index之后，就可以在ActivityStack类的成员变量mHistory中得到一个ActivityRecord对象r。这个ActivityRecord对象r同样是用来描述Launcher组件的。<br/></div><div><br/></div><div>&nbsp; &nbsp; ActivityStack类的成员变量mMainStack是一个布尔变量，当它的值等于true的时候，就说明当前正在处理的ActivityStack对象是用来描述系统的Activity组件堆栈的。ActivityStack类的另外一个成员变量mService指向了系统中的ActivityManagerService服务。ActivityManagerService服务有一个类型为布尔值得成员变量mBooted，它的初始化的值为false，表示系统尚未启动完成。<br/></div><div><br/></div><div>&nbsp; &nbsp; 从前面的调用过程可以直到，参数fromTimeout的值等于false。在这种情况下，如果ActivityManagerService服务的成员变量mBooted也等于false,那么就说明应用程序已经启动起来了，即说明系统已经启动完成了。这个时候ActivityManagerService服务的成员变量mBooted以及变量enableScreen的值就会被设置为true。<br/></div><div><br/></div><div>&nbsp; &nbsp; 当变量enableScreen的值等于true的时候，ActivityStack类就会调用ActivityManagerService服务的成员函数enableScreenAfterBoot停止显示开机动画，以便可以将屏幕让出来显示应用程序Launcher的界面。<br/></div><div><br/></div><div>&nbsp; &nbsp;&nbsp;<br/></div><div>&nbsp; &nbsp; &nbsp;ActivityManagerService类的成员函数enableScreenAfterBoot的实现如下所示：</div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public final class ActivityManagerService extends ActivityManagerNative</div><div>&nbsp; &nbsp; &nbsp; &nbsp; implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {</div><div>&nbsp; &nbsp; ......</div><div><br/></div><div>&nbsp; &nbsp; void enableScreenAfterBoot() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_ENABLE_SCREEN,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SystemClock.uptimeMillis());</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mWindowManager.enableScreenAfterBoot();</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; ......</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;ActivityManagerService类的成员变量mWindowManager指向了系统中的Window管理服务WindowManagerService，ActivityManagerService服务通过调用它的成员函数enableScreenAfterBoot来停止显示开机动画。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;WindowManagerService类的成员函数enableScreenAfterBoot的实现如下所示：</div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public class WindowManagerService extends IWindowManager.Stub</div><div>&nbsp; &nbsp; &nbsp; &nbsp; implements Watchdog.Monitor {</div><div>&nbsp; &nbsp; ......</div><div><br/></div><div>&nbsp; &nbsp; public void enableScreenAfterBoot() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; synchronized(mWindowMap) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (mSystemBooted) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mSystemBooted = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; performEnableScreen();</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; ......</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;WindowManagerService类的成员变量mSystemBooted用来记录系统是否已经启动完成的。如果已经启动完成的话，那么这个成员变量的值就会等于true，这时候WindowManagerService类的成员函数enableScreenAfterBoot什么也不做就返回了，否则的话，WindowManagerService类的成员函数enableScreenAfterBoot首先将这个成员变量的值设置为true，接着再调用另外一个成员函数performEnbaleScreen来执行停止显示开机动画的操作。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;WindowManagerService类的成员函数performEnableScreen的实现如下所示：</div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>public class WindowManagerService extends IWindowManager.Stub</div><div>&nbsp; &nbsp; &nbsp; &nbsp; implements Watchdog.Monitor {</div><div>&nbsp; &nbsp; ......</div><div><br/></div><div>&nbsp; &nbsp; public void performEnableScreen() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; synchronized(mWindowMap) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (mDisplayEnabled) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!mSystemBooted) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ......</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mDisplayEnabled = true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ......</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IBinder surfaceFlinger = ServiceManager.getService(&quot;SurfaceFlinger&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (surfaceFlinger != null) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //Slog.i(TAG, &quot;******* TELLING SURFACE FLINGER WE ARE BOOTED!&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Parcel data = Parcel.obtain();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data.writeInterfaceToken(&quot;android.ui.ISurfaceComposer&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data, null, 0);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data.recycle();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } catch (RemoteException ex) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Slog.e(TAG, &quot;Boot completed: SurfaceFlinger is dead!&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ......</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; ......</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp; WindowManagerService类的另外一个成员变量mDisplayEnabled用来描述WindowManagerService是否已经初始化过系统的屏幕了，只有当它的值等于false，并且系统已经完成启动，即WindowManagerService类的成员变量mSystemBooted等于true的情况下，WindowManagerService类的成员函数performEnableScreen才通知SurfaceFlinger服务停止显示开机动画。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;注意，WindowManagerService类的成员函数performEnableScreen是通过一个类型为IBinder.FIRST_CALL_TRANSACTION的进程间通信请求来通知SurfaceFlinger服务停止显示开机动画的。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;在SurfaceFlinger服务，类型为IBinder.FIRST_CALL_TRANSACTION的进程间通信请求被定义为停止显示开机的动画的请求，如下所示：</div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>class BnSurfaceComposer : public BnInterface&lt;ISurfaceComposer&gt;</div><div>{</div><div>public:</div><div>&nbsp; &nbsp; enum {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // Note: BOOT_FINISHED must remain this value, it is called from</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // Java by ActivityManagerService.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; BOOT_FINISHED = IBinder::FIRST_CALL_TRANSACTION,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ......</div><div>&nbsp; &nbsp; };</div><div><br/></div><div>&nbsp; &nbsp; virtual status_t&nbsp; &nbsp; onTransact( uint32_t code,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const Parcel&amp; data,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Parcel* reply,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; uint32_t flags = 0);</div><div>};</div></div><div><br/></div><div>BnSurfaceComposer类定义在文件frameworks/base/include/surfaceflinger/ISurfaceComposer.h中，它是SurfaceFlinger服务所要继承的Binder本地对象类，其中。当SurfaceFlinger服务接收到类型为IBinder::FIRST_CALL_TRANSACTION,即类型为BOOT_FINISHED的进程间通信请求时，它就会将该请求交给它的成员函数bootFinished来处理。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;SurfaceFlinger服务的成员函数bootFinished实现在文件frameworks/base/services/surfaceflinger/SurfaceFlinger.cpp中，如下所示：</div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>void SurfaceFlinger::bootFinished()</div><div>{</div><div>&nbsp; &nbsp; const nsecs_t now = systemTime();</div><div>&nbsp; &nbsp; const nsecs_t duration = now - mBootTime;</div><div>&nbsp; &nbsp; LOGI(&quot;Boot is finished (%ld ms)&quot;, long(ns2ms(duration)) );</div><div>&nbsp; &nbsp; mBootFinished = true;</div><div>&nbsp; &nbsp; property_set(&quot;ctl.stop&quot;, &quot;bootanim&quot;);</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;这个函数主要就是将系统属性&quot;ctl.stop&quot;的值设置为“bootanim”。前面提到，每当有一个系统属性发送变化时，init进程就会被唤醒，并且调用在它里面的函数handle_property_set_fd来处理这个系统属性变化事件。在我们这个场景中，由于被改变的系统属性的名称为&quot;ctl.&quot;开头的，即被改变的系统属性是一个控制类型的属性，因此，在接下来的函数handle_property_set_fd又会自动阿勇另外一个函数handle_control_message来处理该系统属性变化事件。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;函数handle_control_message实现在文件system/core/init/init.c中，如下所示：</div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>void handle_control_message(const char *msg, const char *arg)</div><div>{</div><div>&nbsp; &nbsp; if (!strcmp(msg,&quot;start&quot;)) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; msg_start(arg);</div><div>&nbsp; &nbsp; } else if (!strcmp(msg,&quot;stop&quot;)) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; msg_stop(arg);</div><div>&nbsp; &nbsp; } else {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ERROR(&quot;unknown control msg &apos;%s&apos;\n&quot;, msg);</div><div>&nbsp; &nbsp; }</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; 从前面的调用过程可以知道，参数msg和arg的值分别等于&quot;stop&quot;和“bootanim”，这表示要停止执行名称为&quot;bootanim&quot;的服务，这就是通过调用函数msg_stop来实现的。</div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>static void msg_stop(const char *name)</div><div>{</div><div>&nbsp; &nbsp; struct service *svc = service_find_by_name(name);</div><div><br/></div><div>&nbsp; &nbsp; if (svc) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; service_stop(svc);</div><div>&nbsp; &nbsp; } else {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ERROR(&quot;no such service &apos;%s&apos;\n&quot;, name);</div><div>&nbsp; &nbsp; }</div><div>}</div></div><div><br/></div><div>&nbsp; &nbsp; &nbsp;这个函数首先调用函数service_find_by_name来找到名称等于name,即“bootanim”的服务，然后再调用函数service_stop来停止这个服务。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;前面提到，名称为“bootanim”的服务对应的应用程序即为/system/bin/bootanimation。因此，停止名称为“bootanim”的服务即为停止执行的应用程序/system/bin/bootanimation,而应用程序/system/bin/bootanimation停止执行的时候，开机动画就会停止显示了。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;至此，Android系统的三个开机画面的显示过程就分析完成了。通过这个三个开机画面的显示过程分析，我们学习到：</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;1.在内核层，系统屏幕是使用一个称为帧缓冲区的硬件设备来描述的，而用户空间的应用程序可以通过设备文件/dev/fb0或者/dev/graphics/fb0来操作这个硬件设备。实际上，帧缓冲区本身并不是一个真正的硬件，它只不过是对显卡的一个抽象表示，不过，我们通过访问帧缓冲区就可以间接地操作显卡内存以及显卡中的其他寄存器。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;2.OpenGL是通过EGL接口来渲染屏幕，而EGL接口是通过ANativeWindow类来间接地渲染屏幕的。我们可以将ANativeWindow类理解成一个Andriod系统的本地窗口类，即相当于Windows系统中的窗口句柄概念，它最终是通过文件/dev/fb0或者/dev/graphics/fb0来渲染屏幕的。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;3.init进程在启动的过程中，会将另外一个uevented进程也启动起来。uevented进程对应的可执行文件与init进程对应的可执行文件均为/init,不过uevented进程主要负责处理内核发出的uevent事件，即负责管理系统中的设备文件。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;4.每当我们设置一个系统属性的时候，init进程都会接收到一个系统属性变化事件。当发生变化的系统属性名称等于&quot;ctl.start&quot;或者“ctl.stop”，那么实际上是向init进程发出一个启动或者停止服务的命令。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;前面第一点和第二点知识点是与Android系统的UI实现相关的，而后面的第三和第四点是两个额外获得的知识点。</div><div><br/></div><div>&nbsp; &nbsp; &nbsp;本文主要的目的并不是单纯的为了介绍Android系统的开机画面，而是系统通过Android系统开机画面来作为切入点来分析Android系统的UI实现。在后面的文章中，我们就会根据本文所涉及到的知识点，来展开分析Android系统的UI实现，敬请期待。</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><span style="font-size: 19px;"><a href="http://andsec.cc/android%E6%BA%90%E7%A0%81%E5%8F%8Aandroid%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%EF%BC%88%E4%B8%8B%E8%BD%BD%E6%BA%90%EF%BC%89/" style="font-size: 19px;">http://andsec.cc/android%E6%BA%90%E7%A0%81%E5%8F%8Aandroid%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%EF%BC%88%E4%B8%8B%E8%BD%BD%E6%BA%90%EF%BC%89/</a></span></div><div><span style="font-size: 19px;">老罗内核之旅-Android开机动画解析</span></div><div><span style="font-size: 19px;"><a href="http://blog.csdn.net/luoshengyang/article/details/7691321" style="font-size: 19px;">http://blog.csdn.net/luoshengyang/article/details/7691321</a></span></div><div><span style="font-size: 19px;"><a href="http://blog.csdn.net/tianxiawuzhei/article/details/7602956" style="font-size: 19px;">http://blog.csdn.net/tianxiawuzhei/article/details/7602956</a></span></div><div><span style="font-size: 19px;"><a href="http://www.linuxidc.com/Linux/2012-05/61024.htm" style="font-size: 19px;">http://www.linuxidc.com/Linux/2012-05/61024.htm</a></span></div></en-note>]]></content><created>20170905T144326Z</created><updated>20171011T143414Z</updated><note-attributes><author>1009439210@qq.com</author><source>desktop.win</source><source-application>evernote.win32</source-application></note-attributes></note></en-export>
